import { actions } from './actions.js';
import { el } from './domUtils.js';
import { state } from './state.js';
import * as C from './config.js';
import { CLOTHING_ITEMS, CLOTHING_SLOTS } from './wardrobeConfig.js';
import { equipItem, unequipItem } from './wardrobeLogic.js';

// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º

let fullBodyDescriptionForModalStore = "";
let choiceButtonCache = {};


export function log(msg, type = 'default') {
    // 1. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const newLogEntry = {
        text: msg,
        type: type,
        timestamp: state.day // –ò–ª–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    };

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    state.logMessages.unshift(newLogEntry);

    // 3. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (state.logMessages.length > state.maxLogMessages) {
        state.logMessages.length = state.maxLogMessages; // –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    }

    // 4. –†–µ–Ω–¥–µ—Ä–∏–º –ª–æ–≥
    renderLog();
}

function renderLog() {
    el.actionLogOutput.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    if (state.logMessages.length === 0) {
        el.actionLogOutput.textContent = "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç."; // –ò–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        el.actionLogOutput.className = 'log-default'; // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤
        return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ª—É—á—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ div'—ã)
    const ul = document.createElement('ul');
    ul.style.listStyleType = 'none'; // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
    ul.style.padding = '0';
    ul.style.margin = '0';


    state.logMessages.forEach((entry, index) => {
        const li = document.createElement('li');
        li.textContent = `–î–µ–Ω—å ${entry.timestamp}: ${entry.text}`; // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π, –ø–æ—Ç–æ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–∂–Ω—ã–π
        li.className = 'log-entry log-default'; // –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        if (entry.type === 'money-gain') li.classList.replace('log-default', 'log-money-gain');
        else if (entry.type === 'money-loss') li.classList.replace('log-default', 'log-money-loss');
        else if (entry.type === 'hormone-change') li.classList.replace('log-default', 'log-hormone-change');
        else if (entry.type === 'progress-change') li.classList.replace('log-default', 'log-progress-change');
        else if (entry.type === 'discovery') li.classList.replace('log-default', 'log-discovery');
        else if (entry.type === 'important') li.classList.replace('log-default', 'log-important');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∞–º–æ–π –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        if (index === 0) {
             li.classList.add('log-updated'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
             setTimeout(() => {
                li.classList.remove('log-updated');
             }, 300); // –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –≤ CSS
        }

        ul.appendChild(li);
    });
    el.actionLogOutput.appendChild(ul);
    
    const latestEntry = state.logMessages[0];
    const classesToRemove = Array.from(el.actionLogOutput.classList).filter(
        cls => cls.startsWith('log-') && cls !== 'log-default' && !cls.includes('entry') // –Ω–µ —É–¥–∞–ª—è–µ–º entry-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    );
    el.actionLogOutput.classList.remove(...classesToRemove);
    el.actionLogOutput.classList.add('log-default'); // –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–π

    if (latestEntry) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç
        if (latestEntry.type === 'money-gain') el.actionLogOutput.classList.replace('log-default','log-money-gain');
        else if (latestEntry.type === 'money-loss') el.actionLogOutput.classList.replace('log-default','log-money-loss');
        // ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ ...
        else if (latestEntry.type === 'important') el.actionLogOutput.classList.replace('log-default','log-important');
    }

}


export function updateTabsVisibility() {
    if (!Array.isArray(el.tabs)) {
        console.error('el.tabs is not an array');
        return;
    }

    let tabSwitched = false;
    const DEFAULT_TAB = 'income';

    el.tabs.forEach(btn => {
        if (btn.dataset.tab === 'hormone') {
            const isHormoneTabVisible = state.hormonesUnlocked;
            btn.style.display = isHormoneTabVisible ? '' : 'none';

            if (!isHormoneTabVisible && state.tab === 'hormone') {
                state.tab = DEFAULT_TAB;
                tabSwitched = true;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã —Å—Ä–∞–∑—É –≤ —Ç–æ–º –∂–µ —Ü–∏–∫–ª–µ
        if (tabSwitched) {
            btn.classList.toggle('selected', btn.dataset.tab === state.tab);
        }
    });
}

export function updateProgressDisplay() {
    if (!state.hormonesUnlocked) {
        el.progressTitle.textContent = "–û—Ç–∫—Ä—ã—Ç–∏—è";
        el.progressIcon.textContent = "üí°";
        el.prog.textContent = `${state.discoveryPoints} / ${C.MAX_DISCOVERY_POINTS}`;
        el.pbar.style.width = (state.discoveryPoints / C.MAX_DISCOVERY_POINTS * 100) + '%';
    } else {
        el.progressTitle.textContent = "–ü—Ä–æ–≥—Ä–µ—Å—Å";
        el.progressIcon.textContent = "üìà";
        el.prog.textContent = `${state.progress}% / ${C.MAX_PROGRESS}%`;
        el.pbar.style.width = (state.progress / C.MAX_PROGRESS * 100) + '%';
    }
}

export function getCurrentOutfitDescription() {
    const outfit = state.currentOutfit;
    const wornItemsDescriptions = [];
    let hasFullBody = false;

    if (outfit[CLOTHING_SLOTS.FULL_BODY]) {
        const item = CLOTHING_ITEMS[outfit[CLOTHING_SLOTS.FULL_BODY]];
        if (item) {
            wornItemsDescriptions.push(`—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–µ—Ç–∞ –≤: ${item.name.toLowerCase()}`);
            hasFullBody = true;
        }
    }

    if (!hasFullBody) {
        if (outfit[CLOTHING_SLOTS.TOP]) {
            const item = CLOTHING_ITEMS[outfit[CLOTHING_SLOTS.TOP]];
            if (item) wornItemsDescriptions.push(`–Ω–∞ —Ç–µ–±–µ –Ω–∞–¥–µ—Ç–∞ ${item.name.toLowerCase()}`);
        }
        if (outfit[CLOTHING_SLOTS.BOTTOM]) {
            const item = CLOTHING_ITEMS[outfit[CLOTHING_SLOTS.BOTTOM]];
            if (item) {
                if (wornItemsDescriptions.length > 0 && outfit[CLOTHING_SLOTS.TOP]) {
                    wornItemsDescriptions.push(`–∏ ${item.name.toLowerCase()}`);
                } else {
                    wornItemsDescriptions.push(`–Ω–∞ —Ç–µ–±–µ –Ω–∞–¥–µ—Ç–∞ ${item.name.toLowerCase()}`);
                }
            }
        }
    }
    
    const underwearDescriptions = [];
    if (outfit[CLOTHING_SLOTS.UNDERWEAR_TOP]) {
        const item = CLOTHING_ITEMS[outfit[CLOTHING_SLOTS.UNDERWEAR_TOP]];
        if (item) underwearDescriptions.push(item.name.toLowerCase());
    }
    if (outfit[CLOTHING_SLOTS.UNDERWEAR_BOTTOM]) {
        const item = CLOTHING_ITEMS[outfit[CLOTHING_SLOTS.UNDERWEAR_BOTTOM]];
        if (item) underwearDescriptions.push(item.name.toLowerCase());
    }

    if (underwearDescriptions.length > 0) {
        let underwearString = "";
        if (underwearDescriptions.length === 1) {
            underwearString = underwearDescriptions[0];
        } else {
            underwearString = underwearDescriptions.slice(0, -1).join(', ') + ' –∏ ' + underwearDescriptions.slice(-1);
        }
        const connector = wornItemsDescriptions.length > 0 ? ", –∞ –ø–æ–¥ –æ–¥–µ–∂–¥–æ–π" : "–ü–æ–¥ –æ–¥–µ–∂–¥–æ–π";
        wornItemsDescriptions.push(`${connector} —É —Ç–µ–±—è ${underwearString}`);
    }
    
    if (outfit[CLOTHING_SLOTS.SHOES]) {
        const item = CLOTHING_ITEMS[outfit[CLOTHING_SLOTS.SHOES]];
        if (item) {
            const connector = wornItemsDescriptions.length > 0 ? ", –Ω–∞ –Ω–æ–≥–∞—Ö - " : "–ù–∞ –Ω–æ–≥–∞—Ö - ";
            wornItemsDescriptions.push(`${connector}${item.name.toLowerCase()}`);
        }
    }

    if (wornItemsDescriptions.length === 0) {
        return "üëï –ù–∞—Ä—è–¥: –¢—ã —Å–µ–π—á–∞—Å –Ω–∏ –≤–æ —á—Ç–æ –Ω–µ –æ–¥–µ—Ç–∞."; 
    }

    let finalDescription = wornItemsDescriptions.join(' ').trim();
    if (finalDescription.startsWith("–∏ ")) finalDescription = finalDescription.substring(2).trim();
    if (finalDescription.startsWith(", ")) finalDescription = finalDescription.substring(1).trim();
    
    if (!finalDescription.endsWith('.') && !finalDescription.endsWith('!') && !finalDescription.endsWith('?')) {
        finalDescription += '.';
    }
    
    return `üëï –ù–∞—Ä—è–¥: ${finalDescription.charAt(0).toUpperCase() + finalDescription.slice(1)}`;
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ ---
/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞.
 * @param {number} T - –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ (EMA).
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞.
 */
function getVoiceDescription(T, E, P) {
    let voicePitch = C.VOICE_PITCH_BASE_HZ - (T - E) * C.VOICE_PITCH_HORMONE_FACTOR;
    voicePitch = Math.max(80, Math.min(300, voicePitch));

    let specificDesc = "";
    if (E - T > C.VOICE_E_DOMINANT_THRESHOLD_FOR_CHANGE_2 && P > C.VOICE_P_THRESHOLD_FOR_CHANGE_2) {
        specificDesc = "–ó–≤—É—á–∏—Ç –∑–∞–º–µ—Ç–Ω–æ –≤—ã—à–µ, –Ω–µ–∂–Ω–µ–µ, –ø–æ—á—Ç–∏ –Ω–µ—É–∑–Ω–∞–≤–∞–µ–º–æ.";
    } else if (E - T > C.VOICE_E_DOMINANT_THRESHOLD_FOR_CHANGE_1) {
        specificDesc = "–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º—è–≥—á–µ –∏ –≤—ã—à–µ, —Ç–µ—Ä—è–µ—Ç –≥—Ä—É–±—ã–µ –Ω–æ—Ç–∫–∏.";
    } else if (T - E > C.VOICE_T_DOMINANT_THRESHOLD) {
        specificDesc = "–ù–∏–∑–∫–∏–π, —Å –±–∞—Ä—Ö–∞—Ç–Ω—ã–º–∏ –º—É–∂—Å–∫–∏–º–∏ –æ–±–µ—Ä—Ç–æ–Ω–∞–º–∏.";
    } else {
        specificDesc = "–¢–µ–º–±—Ä –Ω–∞ –≥—Ä–∞–Ω–∏, –∞–Ω–¥—Ä–æ–≥–∏–Ω–Ω—ã–π, –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π.";
    }
    return `üé§ –ì–æ–ª–æ—Å: ${voicePitch.toFixed(0)} –ì—Ü. ${specificDesc}`;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∂–∏.
 * @param {number} T - –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ (EMA).
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {boolean} E_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞.
 * @param {boolean} T_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∂–∏.
 */
function getSkinDescription(T, E, P, E_is_dominant, T_is_dominant) {
    let skinDescText = "üíß –ö–æ–∂–∞: ";
    if (E_is_dominant && E > C.SKIN_E_DOMINANT_THRESHOLD_FOR_SOFTNESS) {
        skinDescText += P > C.SKIN_P_THRESHOLD_SOFT_2 ? "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –≥–ª–∞–¥–∫–∞—è, —à–µ–ª–∫–æ–≤–∏—Å—Ç–∞—è –Ω–∞ –æ—â—É–ø—å, –ø–æ—Ä—ã –ø–æ—á—Ç–∏ –Ω–µ–≤–∏–¥–∏–º—ã. –õ—ë–≥–∫–∏–π —Ä—É–º—è–Ω–µ—Ü." :
            P > C.SKIN_P_THRESHOLD_SOFT_1 ? "–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—â—É—Ç–∏–º–æ –º—è–≥—á–µ, –Ω–µ–∂–Ω–µ–µ, —É—Ö–æ–¥–∏—Ç –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫." :
            "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –º—è–≥–∫–æ—Å—Ç—å, –º–µ–Ω–µ–µ –∂–∏—Ä–Ω–∞—è.";
        if (E > C.SKIN_E_THRESHOLD_FOR_THINNING && P > C.SKIN_P_THRESHOLD_FOR_THINNING) {
            skinDescText += " –ö–∞–∂–µ—Ç—Å—è —Ç–æ–Ω—å—à–µ, –≤–µ–Ω–∫–∏ –Ω–∞ –∑–∞–ø—è—Å—Ç—å—è—Ö –∏ –≥—Ä—É–¥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∏–¥–Ω—ã –æ—Ç—á–µ—Ç–ª–∏–≤–µ–µ.";
        }
    } else if (T_is_dominant && T > C.SKIN_T_DOMINANT_THRESHOLD_FOR_ROUGHNESS) {
        skinDescText += "–ü–ª–æ—Ç–Ω–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ–ª–µ–µ —Å–∫–ª–æ–Ω–Ω–∞—è –∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏ –∏ –∞–∫–Ω–µ. –ü–æ—Ä—ã –∑–∞–º–µ—Ç–Ω—ã.";
    } else {
        skinDescText += "–û–±—ã—á–Ω–∞—è, –Ω–æ —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –∑–∞–º–µ—á–∞—Ç—å —Ç–æ–Ω–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –µ—ë —Ç–µ–∫—Å—Ç—É—Ä–µ.";
    }
    return skinDescText;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ª–æ—Å –Ω–∞ —Ç–µ–ª–µ/–ª–∏—Ü–µ.
 * @param {number} T - –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ (EMA).
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {boolean} E_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞.
 * @param {boolean} T_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ª–æ—Å.
 */
function getBodyHairDescription(T, E, P, E_is_dominant, T_is_dominant) {
    let bodyHairDescText = "üåø –í–æ–ª–æ—Å—ã –Ω–∞ —Ç–µ–ª–µ/–ª–∏—Ü–µ: ";
    if (E_is_dominant && E > C.BODYHAIR_E_DOMINANT_THRESHOLD_FOR_REDUCTION && P > C.BODYHAIR_P_THRESHOLD_FOR_REDUCTION) {
        bodyHairDescText += "–†–æ—Å—Ç –≤–æ–ª–æ—Å –Ω–∞ —Ç–µ–ª–µ –∑–∞–º–µ–¥–ª–∏–ª—Å—è, –æ–Ω–∏ —Å—Ç–∞–ª–∏ —Ç–æ–Ω—å—à–µ –∏ —Å–≤–µ—Ç–ª–µ–µ. ";
        if (T < C.BODYHAIR_T_THRESHOLD_FOR_FACIAL_PUBESCENCE && P > C.BODYHAIR_P_THRESHOLD_FOR_FACIAL_PUBESCENCE) {
            bodyHairDescText += "–©–µ—Ç–∏–Ω–∞ –Ω–∞ –ª–∏—Ü–µ –ø–æ—á—Ç–∏ –Ω–µ —Ä–∞—Å—Ç–µ—Ç, –∏–ª–∏ —Å—Ç–∞–ª–∞ –ø—É—à–∫–æ–≤–æ–π.";
        } else if (T < C.BODYHAIR_T_THRESHOLD_FOR_FACIAL_SLOWDOWN) {
            bodyHairDescText += "–†–æ—Å—Ç —â–µ—Ç–∏–Ω—ã –∑–∞–º–µ–¥–ª–µ–Ω, –±—Ä–∏—Ç—å—ë —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∂–µ.";
        }
    } else if (T_is_dominant && T > C.BODYHAIR_T_DOMINANT_THRESHOLD_FOR_THICK) {
        bodyHairDescText += "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç –≤–æ–ª–æ—Å –Ω–∞ —Ç–µ–ª–µ –∏ –ª–∏—Ü–µ, –≥—É—Å—Ç–∞—è —â–µ—Ç–∏–Ω–∞.";
    } else {
        bodyHairDescText += "–ë–µ–∑ –æ—Å–æ–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.";
    }
    return bodyHairDescText;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–¥–∏.
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–¥–∏.
 */
function getBreastDescription(E, P) {
    let breastDescText = "üçà –ì—Ä—É–¥—å: ";
    let breastDevStageRaw = 0;
    if (E > C.BREAST_E_THRESHOLD_START_BUDDING && P > C.BREAST_P_THRESHOLD_START_BUDDING) {
        breastDevStageRaw = 1 + (Math.max(0, E - C.BREAST_E_THRESHOLD_START_BUDDING) / C.BREAST_E_UNITS_PER_STAGE) *
            (C.BREAST_PROGRESS_FACTOR_BASE + P / C.BREAST_PROGRESS_FACTOR_SCALE);
    }
    const currentBreastDevStage = Math.min(C.BREAST_MAX_DEV_STAGE, Math.floor(breastDevStageRaw));

    if (currentBreastDevStage === 0) breastDescText += "–ê–±—Å–æ–ª—é—Ç–Ω–æ –ø–ª–æ—Å–∫–∞—è.";
    else if (currentBreastDevStage === 1) breastDescText += `–ü–æ—è–≤–∏–ª–∏—Å—å –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–µ —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è –ø–æ–¥ —Å–æ—Å–∫–∞–º–∏ (E:${E.toFixed(0)}, P:${P}%).`;
    else if (currentBreastDevStage === 2) breastDescText += `–ù–µ–±–æ–ª—å—à–∞—è, –Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞—è (—Ä–∞–∑–º–µ—Ä A). –°–æ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å. (E:${E.toFixed(0)}, P:${P}%).`;
    else if (currentBreastDevStage === 3) breastDescText += `–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —É–ø—Ä—É–≥–∞—è (–±–ª–∏–∂–µ –∫ B). (E:${E.toFixed(0)}, P:${P}%).`;
    else breastDescText += `–ü—ã—à–Ω–∞—è, –º—è–≥–∫–∞—è, —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è (—Ä–∞–∑–º–µ—Ä C+!). (E:${E.toFixed(0)}, P:${P}%).`;
    return breastDescText;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã.
 * @param {number} T - –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ (EMA).
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {boolean} E_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞.
 * @param {boolean} T_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã.
 */
function getFigureDescription(T, E, P, E_is_dominant, T_is_dominant) {
    let figureDescText = "üçë –§–∏–≥—É—Ä–∞: ";
    const whr_change_potential = C.FIGURE_WHR_BASE - C.FIGURE_WHR_TARGET_FEMALE;
    let whr_progress_to_female_target = 0;
    if (E_is_dominant && E > C.FIGURE_E_DOMINANT_THRESHOLD_FOR_WHR_CHANGE) {
        whr_progress_to_female_target = Math.min(1, (E - C.FIGURE_E_DOMINANT_THRESHOLD_FOR_WHR_CHANGE) / C.FIGURE_E_UNITS_FOR_WHR_PROGRESS) * (P / C.MAX_PROGRESS);
    }
    const current_whr = (C.FIGURE_WHR_BASE - whr_change_potential * whr_progress_to_female_target).toFixed(2);
    figureDescText += `–¢–∞–ª–∏—è/–±–µ–¥—Ä–∞: ${current_whr}. `;

    if (E_is_dominant && E > C.FIGURE_E_DOMINANT_THRESHOLD_FOR_FAT_REDISTRIBUTION && P > C.FIGURE_P_THRESHOLD_FOR_FAT_REDISTRIBUTION) {
        figureDescText += "–ñ–∏—Ä –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –±–µ–¥—Ä–∞ –∏ —è–≥–æ–¥–∏—Ü—ã. –¢–∞–ª–∏—è –∏–∑—è—â–Ω–µ–µ.";
    } else if (T_is_dominant && T > C.FIGURE_T_DOMINANT_THRESHOLD_FOR_MALE_FAT) {
        figureDescText += "–ñ–∏—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –∂–∏–≤–æ—Ç–∞, —Ñ–∏–≥—É—Ä–∞ –º–∞—Å–∫—É–ª–∏–Ω–Ω–∞—è.";
    } else if (P > C.FIGURE_P_THRESHOLD_FOR_SUBTLE_SOFTENING) {
        figureDescText += "–ö–æ–Ω—Ç—É—Ä—ã —Ç–µ–ª–∞ –Ω–µ—É–ª–æ–≤–∏–º–æ —Å–º—è–≥—á–∞—é—Ç—Å—è.";
    }
    return figureDescText;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º—ã—à—Ü.
 * @param {number} T - –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ (EMA).
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {boolean} E_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –º—ã—à—Ü.
 */
function getMuscleDescription(T, E, P, E_is_dominant) {
    let muscleDescText = "üí™ –ú—ã—à—Ü—ã: ";
    if (T > C.MUSCLE_T_HIGH_THRESHOLD_FOR_BULK && !E_is_dominant) {
        muscleDescText += P < C.MUSCLE_P_THRESHOLD_FOR_BULK_SOFTENING ? "–†–∞–∑–≤–∏—Ç—ã–µ, —Ä–µ–ª—å–µ—Ñ–Ω—ã–µ." : "–ö—Ä–µ–ø–∫–∏–µ, –Ω–æ —Ç–µ—Ä—è—é—Ç —Ç–≤–µ—Ä–¥–æ—Å—Ç—å.";
    } else if (T > C.MUSCLE_T_MID_THRESHOLD_FOR_TONE && !E_is_dominant) {
        muscleDescText += "–£–º–µ—Ä–µ–Ω–Ω–æ —Ä–∞–∑–≤–∏—Ç—ã, –≤ —Ç–æ–Ω—É—Å–µ.";
    } else if (E_is_dominant && E > C.MUSCLE_E_DOMINANT_THRESHOLD_FOR_LOSS) {
        muscleDescText += `–£–º–µ–Ω—å—à–∏–ª–∏—Å—å, —Å—Ç–∞–ª–∏ –º—è–≥—á–µ. –°–∏–ª–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å (T:${T.toFixed(0)}).`;
    } else {
        muscleDescText += `–°–ª–∞–±—ã–µ, –±–µ–∑ —Ä–µ–ª—å–µ—Ñ–∞. (T:${T.toFixed(0)})`;
    }
    return muscleDescText;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ–Ω–∏—Å–∞/–∫–ª–∏—Ç–æ—Ä–∞.
 * @param {number} T - –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ (EMA).
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {boolean} E_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ–Ω–∏—Å–∞/–∫–ª–∏—Ç–æ—Ä–∞.
 */
function getPenisDescription(T, E, P, E_is_dominant) {
    let penisShrinkageFactor = ((E - C.BASE_E) * C.GENITAL_PENIS_E_SHRINK_FACTOR + Math.max(0, 50 - T) * C.GENITAL_PENIS_LOW_T_SHRINK_FACTOR) *
        (C.GENITAL_PROGRESS_ACCELERATOR_BASE + P / C.GENITAL_PROGRESS_ACCELERATOR_SCALE);
    penisShrinkageFactor = Math.max(0, penisShrinkageFactor);
    const penisLengthCm = Math.max(C.GENITAL_PENIS_MIN_CM, C.GENITAL_PENIS_BASE_CM - penisShrinkageFactor).toFixed(1);

    let erectionQuality = '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è';
    if (T < C.GENITAL_ERECTION_T_LOW_THRESHOLD_ALMOST_NONE && E_is_dominant && P > C.GENITAL_ERECTION_P_LOW_THRESHOLD_ALMOST_NONE) erectionQuality = '–ø–æ—á—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    else if (T < C.GENITAL_ERECTION_T_LOW_THRESHOLD_VERY_WEAK || (E_is_dominant && E > C.GENITAL_ERECTION_E_HIGH_THRESHOLD_VERY_WEAK)) erectionQuality = '–æ—á–µ–Ω—å —Å–ª–∞–±–∞—è';
    else if (T < C.GENITAL_ERECTION_T_LOW_THRESHOLD_WEAK || (E_is_dominant && E > C.GENITAL_ERECTION_E_HIGH_THRESHOLD_WEAK)) erectionQuality = '—Å–Ω–∏–∂–µ–Ω–∞, –º–µ–Ω–µ–µ —Ç–≤–µ—Ä–¥–∞—è';

    let penisDescText;
    if (P > C.GENITAL_P_THRESHOLD_FOR_CLIT_TEXT && E_is_dominant && parseFloat(penisLengthCm) < C.GENITAL_PENIS_CLIT_TRANSITION_CM) {
        penisDescText = `üéÄ –ö–ª–∏—Ç–æ—Ä: ${penisLengthCm} —Å–º. –°—Ç–∞–ª –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º. `;
    } else {
        penisDescText = `üçÜ –ü–µ–Ω–∏—Å: ${penisLengthCm} —Å–º. `;
    }
    penisDescText += `–≠—Ä–µ–∫—Ü–∏—è: ${erectionQuality}.`;
    return penisDescText;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —è–∏—á–µ–∫.
 * @param {number} T - –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ (EMA).
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {boolean} E_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ —è–∏—á–µ–∫.
 */
function getTesticlesDescription(T, E, P, E_is_dominant) {
    let testicleShrinkageFactor = ((E - C.BASE_E) * C.GENITAL_TESTICLES_E_SHRINK_FACTOR + Math.max(0, 40 - T) * C.GENITAL_TESTICLES_LOW_T_SHRINK_FACTOR) *
        (C.GENITAL_PROGRESS_ACCELERATOR_BASE + P / C.GENITAL_PROGRESS_ACCELERATOR_SCALE);
    testicleShrinkageFactor = Math.max(0, testicleShrinkageFactor);
    const testicleVolume = Math.max(C.GENITAL_TESTICLES_MIN_VOL_ML, C.GENITAL_TESTICLES_BASE_VOL_ML - testicleShrinkageFactor).toFixed(1);
    const testicleTexture = (E_is_dominant && E > C.GENITAL_TESTICLES_E_THRESHOLD_SOFT_TEXTURE && P > C.GENITAL_TESTICLES_P_THRESHOLD_SOFT_TEXTURE) ? '–º—è–≥–∫–∏–µ, —É–º–µ–Ω—å—à–∏–≤—à–∏–µ—Å—è' : '—É–ø—Ä—É–≥–∏–µ';

    let testiclesDescText = `ü•ö –Ø–∏—á–∫–∏: –æ–±—ä—ë–º ~${testicleVolume} –º–ª, ${testicleTexture}. `;
    if (E_is_dominant && E > C.GENITAL_TESTICLES_E_THRESHOLD_ATROPHY && P > C.GENITAL_TESTICLES_P_THRESHOLD_ATROPHY && parseFloat(testicleVolume) < C.GENITAL_TESTICLES_ATROPHY_VOL_ML) {
        testiclesDescText += "–ü–æ—á—Ç–∏ –∞—Ç—Ä–æ—Ñ–∏—Ä–æ–≤–∞–ª–∏—Å—å.";
    }
    return testiclesDescText;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—â—É—â–µ–Ω–∏–π.
 * @param {number} E - –£—Ä–æ–≤–µ–Ω—å —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞ (EMA).
 * @param {number} P - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 * @param {boolean} E_is_dominant - –§–ª–∞–≥ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å—Ç—Ä–æ–≥–µ–Ω–∞.
 * @param {number} hormonalBalanceFactor - –§–∞–∫—Ç–æ—Ä –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –æ—â—É—â–µ–Ω–∏–π.
 */
function getFeelingDescription(E, P, E_is_dominant, hormonalBalanceFactor) {
    let feelingDesc = "‚ú® –û—â—É—â–µ–Ω–∏—è: ";
    if (P > C.FEELING_P_THRESHOLD_PERFECT_SISSY && E_is_dominant && E > C.FEELING_E_THRESHOLD_PERFECT_SISSY) feelingDesc += "–í–æ–ø–ª–æ—â–µ–Ω–∏–µ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ì–∞—Ä–º–æ–Ω–∏—è.";
    else if (P > C.FEELING_P_THRESHOLD_REAL_SISSY && E_is_dominant) feelingDesc += "–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–∏—Å—Å–∏. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç.";
    else if (P > C.FEELING_P_THRESHOLD_TRANSFORMATION_FULL_SWING && (E_is_dominant || hormonalBalanceFactor > C.FEELING_HORMONAL_BALANCE_THRESHOLD_TRANSFORMATION_FULL_SWING)) feelingDesc += "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–¥–µ—Ç –ø–æ–ª–Ω—ã–º —Ö–æ–¥–æ–º! –ü—Ä–∏–ª–∏–≤ —Å–∏—Å—Å–∏-—ç–Ω–µ—Ä–≥–∏–∏.";
    else if (P > C.FEELING_P_THRESHOLD_FIRST_WHISPERS) feelingDesc += "–ü–µ—Ä–≤—ã–µ —à–µ–ø–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π. –¢–µ–ª–æ –º–µ–Ω—è–µ—Ç—Å—è, —ç—Ç–æ –≤–æ–ª–Ω—É–µ—Ç.";
    else feelingDesc += "–°–∞–º–æ–µ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏. –í–µ—Ç–µ—Ä–æ–∫ –ø–µ—Ä–µ–º–µ–Ω –µ–¥–≤–∞ –∫–æ—Å–Ω—É–ª—Å—è.";
    return feelingDesc;
}
// --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ ---

export function updateBody() {
    const T = state.emaT, E = state.emaE;
    const P = state.hormonesUnlocked ? state.progress : 0;
    const T_is_dominant = T > E + 10;
    const E_is_dominant = E > T + 5;
    const hormonalBalanceFactor = Math.max(0, Math.min(100, (E - T + C.MAX_HORMONE_LEVEL) / 2));

    let allBodyLines = [];
    state.recentBodyChanges = []; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

    if (!state.hormonesUnlocked) {
        let preUnlockLines = [];
        preUnlockLines.push("–¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä. –ö–∞–∫–∏–µ-—Ç–æ —Å–º—É—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –∏ –º—ã—Å–ª–∏ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å–µ—â–∞—é—Ç —Ç–µ–±—è, –Ω–æ –ø–æ–∫–∞ –Ω–µ—è—Å–Ω–æ, –∫ —á–µ–º—É –æ–Ω–∏ –≤–µ–¥—É—Ç.");
        preUnlockLines.push(`–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –æ—â—É—â–µ–Ω–∏—è: ${state.discoveryPoints > 15 ? "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –≤—Å–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏." : "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –æ–±—ã—á–Ω—ã–µ –º—ã—Å–ª–∏."}`);
        if (state.discoveryPoints > 0 && state.discoveryPoints < C.DISCOVERY_POINTS_TO_UNLOCK_HORMONES) {
            preUnlockLines.push(`–û—á–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏–π: ${state.discoveryPoints}/${C.DISCOVERY_POINTS_TO_UNLOCK_HORMONES}`);
        } else if (state.discoveryPoints >= C.DISCOVERY_POINTS_TO_UNLOCK_HORMONES && !state.hormonesUnlocked) {
            preUnlockLines.push(`–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ –≤–∞–∂–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è! (–û—á–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏–π: ${state.discoveryPoints})`);
        }
        el.bodyDesc.textContent = preUnlockLines.join('\n\n');
        fullBodyDescriptionForModalStore = preUnlockLines.join('\n\n');
        return;
    }

    // --- –í—ã–∑–æ–≤ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π ---
    allBodyLines.push(generateBodyParameterDescription('voice', getVoiceDescription(T, E, P), state.previousBodyParams.voice, state.recentBodyChanges));
    allBodyLines.push(generateBodyParameterDescription('skin', getSkinDescription(T, E, P, E_is_dominant, T_is_dominant), state.previousBodyParams.skin, state.recentBodyChanges));
    allBodyLines.push(generateBodyParameterDescription('bodyHair', getBodyHairDescription(T, E, P, E_is_dominant, T_is_dominant), state.previousBodyParams.bodyHair, state.recentBodyChanges));
    allBodyLines.push(generateBodyParameterDescription('breast', getBreastDescription(E, P), state.previousBodyParams.breast, state.recentBodyChanges));
    allBodyLines.push(generateBodyParameterDescription('figure', getFigureDescription(T, E, P, E_is_dominant, T_is_dominant), state.previousBodyParams.figure, state.recentBodyChanges));
    allBodyLines.push(generateBodyParameterDescription('muscle', getMuscleDescription(T, E, P, E_is_dominant), state.previousBodyParams.muscle, state.recentBodyChanges));
    allBodyLines.push(generateBodyParameterDescription('genitalsPenis', getPenisDescription(T, E, P, E_is_dominant), state.previousBodyParams.genitalsPenis, state.recentBodyChanges));
    allBodyLines.push(generateBodyParameterDescription('genitalsTesticles', getTesticlesDescription(T, E, P, E_is_dominant), state.previousBodyParams.genitalsTesticles, state.recentBodyChanges));

    // –û—â—É—â–µ–Ω–∏—è –∏ –Ω–∞—Ä—è–¥
    const feelingDesc = getFeelingDescription(E, P, E_is_dominant, hormonalBalanceFactor);
    allBodyLines.push(feelingDesc);

    const outfitDesc = getCurrentOutfitDescription();
    allBodyLines.push(outfitDesc);

    // --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ —Å–≤–æ–¥–∫–∏ ---
    fullBodyDescriptionForModalStore = allBodyLines.join('\n\n');

    let summaryLines = [];
    summaryLines.push(feelingDesc);
    summaryLines.push(outfitDesc);

    if (state.recentBodyChanges.length > 0) {
        summaryLines.push("\n‚ùó –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:");
        const maxChangesToShowInSummary = 3;
        state.recentBodyChanges.slice(0, maxChangesToShowInSummary).forEach(change => {
            summaryLines.push(`  - ${change}`);
        });
        if (state.recentBodyChanges.length > maxChangesToShowInSummary) {
            summaryLines.push(`  ... –∏ –µ—â–µ ${state.recentBodyChanges.length - maxChangesToShowInSummary} –∏–∑–º.`);
        }
    } else if (state.day > 1 && Object.keys(state.previousBodyParams).length > 0) {
        summaryLines.push("\n–ó–∞–º–µ—Ç–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.");
    }
    
    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ DOM ---
    el.bodyDesc.innerHTML = '';
    summaryLines.forEach(line => {
        const p = document.createElement('p');
        p.textContent = line;
        if (line.startsWith("  - ") || line.startsWith("\n‚ùó") || line.startsWith("\n–ó–∞–º–µ—Ç–Ω—ã—Ö")) {
            p.style.whiteSpace = 'pre-wrap';
            if (line.startsWith("  - ")) p.style.marginLeft = "1em";
            if (line.startsWith("\n‚ùó") || line.startsWith("\n–ó–∞–º–µ—Ç–Ω—ã—Ö")) p.style.marginTop = "0.5em";
        }
        el.bodyDesc.appendChild(p);
    });

    let modalButton = el.bodyDesc.querySelector('#open-body-details-button');
    if (!modalButton) {
        modalButton = document.createElement('button');
        modalButton.id = 'open-body-details-button';
        modalButton.className = 'choice-button'; 
        modalButton.textContent = 'üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Å–º–æ—Ç—Ä —Ç–µ–ª–∞';
        modalButton.style.marginTop = '15px'; 
        modalButton.onclick = openBodyDetailsModal; 
        el.bodyDesc.appendChild(modalButton);
    }
}

export function renderWardrobeUI() {
    el.choices.innerHTML = ''; 

    const wardrobeContainer = document.createElement('div');
    wardrobeContainer.id = 'wardrobe-interface';

    const equippedSection = document.createElement('div');
    equippedSection.className = 'wardrobe-section';
    const equippedTitle = document.createElement('h3');
    equippedTitle.textContent = '–°–µ–π—á–∞—Å –Ω–∞–¥–µ—Ç–æ:';
    equippedSection.appendChild(equippedTitle);

    let anythingEquipped = false;
    for (const slotName in state.currentOutfit) {
        const itemId = state.currentOutfit[slotName];
        if (itemId) {
            anythingEquipped = true;
            const item = CLOTHING_ITEMS[itemId];
            const itemDiv = document.createElement('div');
            itemDiv.className = 'wardrobe-item-display';
            
            const itemNameSpan = document.createElement('span');
            const userFriendlySlotName = Object.keys(CLOTHING_SLOTS).find(key => CLOTHING_SLOTS[key] === slotName) || slotName;
            itemNameSpan.textContent = `${item.name} (—Å–ª–æ—Ç: ${userFriendlySlotName})`; 
            itemDiv.appendChild(itemNameSpan);

            const unequipButton = document.createElement('button');
            unequipButton.textContent = '–°–Ω—è—Ç—å';
            unequipButton.className = 'choice-button wardrobe-button'; 
            unequipButton.onclick = () => unequipItem(slotName);
            itemDiv.appendChild(unequipButton);
            
            equippedSection.appendChild(itemDiv);
        }
    }
    if (!anythingEquipped) {
        const p = document.createElement('p');
        p.textContent = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–µ—Ç–æ.';
        equippedSection.appendChild(p);
    }
    wardrobeContainer.appendChild(equippedSection);


    const ownedSection = document.createElement('div');
    ownedSection.className = 'wardrobe-section';
    const ownedTitle = document.createElement('h3');
    ownedTitle.textContent = '–í —à–∫–∞—Ñ—É:';
    ownedSection.appendChild(ownedTitle);

    let anythingInClosetToWear = false;
    const currentlyWornItemIds = Object.values(state.currentOutfit).filter(id => id !== null);

    state.ownedClothes.forEach(itemId => {
        if (!currentlyWornItemIds.includes(itemId)) { 
            anythingInClosetToWear = true;
            const item = CLOTHING_ITEMS[itemId];
            const itemDiv = document.createElement('div');
            itemDiv.className = 'wardrobe-item-display';

            const itemNameSpan = document.createElement('span');
            const slotKeyName = Object.keys(CLOTHING_SLOTS).find(key => CLOTHING_SLOTS[key] === item.slot);
            itemNameSpan.textContent = `${item.name} (—Å–ª–æ—Ç: ${slotKeyName || item.slot})`;
            itemDiv.appendChild(itemNameSpan);

            const equipButton = document.createElement('button');
            equipButton.textContent = '–ù–∞–¥–µ—Ç—å';
            equipButton.className = 'choice-button wardrobe-button';
            equipButton.onclick = () => equipItem(itemId);
            itemDiv.appendChild(equipButton);

            ownedSection.appendChild(itemDiv);
        }
    });

    if (state.ownedClothes.length === 0) {
        const p = document.createElement('p');
        p.textContent = '–í —à–∫–∞—Ñ—É –ø–æ–∫–∞ –ø—É—Å—Ç–æ.';
        ownedSection.appendChild(p);
    } else if (!anythingInClosetToWear && state.ownedClothes.length > 0) {
        const p = document.createElement('p');
        p.textContent = '–í—Å—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–¥–µ–∂–¥–∞ —É–∂–µ –Ω–∞–¥–µ—Ç–∞.';
        ownedSection.appendChild(p);
    }
    
    wardrobeContainer.appendChild(ownedSection);
    el.choices.appendChild(wardrobeContainer);
}

export function renderChoices() {
    el.choices.innerHTML = ''; 

    const actionsToDisplay = actions.filter(action => {
        if (action.tab !== state.tab) {
            return false;
        }
        if (action.tab === 'hormone' && !state.hormonesUnlocked) {
            return false;
        }
        if (action.displayCondition && !action.displayCondition.call(action)) {
            return false;
        }
        return true;
    });

    actionsToDisplay.forEach(action => {
        let buttonElement;

        if (!choiceButtonCache[action.id]) {
            buttonElement = document.createElement('button');
            buttonElement.className = 'choice-button';
            buttonElement.addEventListener('click', action.handler.bind(action));
            choiceButtonCache[action.id] = { buttonElement: buttonElement };
        } else {
            buttonElement = choiceButtonCache[action.id].buttonElement;
        }

        let baseText = typeof action.text === 'function' ? action.text.call(action) : action.text;
        let icon = '';
        switch (action.id) {
            case 'work': icon = 'üíº '; break;
            case 't_blocker': icon = 'üíä '; break;
            case 't_pill': icon = '‚ôÇÔ∏è '; break;
            case 'e_pill': icon = '‚ôÄÔ∏è '; break;
            case 'read_book': icon = state.hormonesUnlocked ? 'üìñ ' : 'üìö '; break;
            case 'browse_internet': icon = 'üåê '; break;
            case 'rest': icon = 'üò¥ '; break;
            case 'save_game': icon = 'üíæ '; break;
            case 'load_game': icon = 'üìÇ '; break; 
        }

        let currentText = icon + baseText;
        let isDisabled = false;

        if (action.cost > 0) {
            if (state.money < action.cost) {
                isDisabled = true;
                currentText += ` (–ù—É–∂–Ω–æ: ${action.cost}${C.CURRENCY_SYMBOL})`;
            } else {
                currentText += ` (‚Äì${action.cost}${C.CURRENCY_SYMBOL})`;
            }
        } else if (action.id === 'work') { 
            currentText += ` (+${C.WORK_INCOME}${C.CURRENCY_SYMBOL})`;
        }
        
        if (action.condition && !action.condition.call(action)) {
            isDisabled = true;
            if (action.id === 't_blocker' && state.t_blocker_active_days > 0) {
                currentText = `${icon}–ë–ª–æ–∫–∞—Ç–æ—Ä –¢ –∞–∫—Ç–∏–≤–µ–Ω (${state.t_blocker_active_days} –¥–Ω.)`;
            }
        }

        buttonElement.textContent = currentText;
        buttonElement.disabled = isDisabled;

        el.choices.appendChild(buttonElement);
    });
}


export function updateStats() {
    el.day.textContent = state.day;
    el.money.textContent = state.money + C.CURRENCY_SYMBOL;
    el.test.textContent = `${state.testosterone.toFixed(0)} / ${C.MAX_HORMONE_LEVEL}`;
    el.est.textContent = `${state.estrogen.toFixed(0)} / ${C.MAX_HORMONE_LEVEL}`;

    updateProgressDisplay(); 
    updateTabsVisibility(); 

    el.tbar.style.width = (state.testosterone / C.MAX_HORMONE_LEVEL * 100) + '%';
    el.ebar.style.width = (state.estrogen / C.MAX_HORMONE_LEVEL * 100) + '%';

    updateBody(); 

    if (state.tab === 'wardrobe') {
        renderWardrobeUI();
    } else { 
        renderChoices(); 
    }
}

export function openBodyDetailsModal() {
    if (el.modalOverlay && el.modalBodyDetailsContent) {
        el.modalBodyDetailsContent.innerHTML = fullBodyDescriptionForModalStore.replace(/\n/g, '<br>');
        el.modalOverlay.classList.add('active');
    } else {
        console.error("Modal elements (overlay or content) not found in el object.");
    }
}

export function closeBodyDetailsModal() {
    if (el.modalOverlay) {
        el.modalOverlay.classList.remove('active');
    }
}

function generateBodyParameterDescription(paramKey, currentValue, previousValue, changeTexts) {
    if (currentValue !== previousValue && previousValue !== undefined && previousValue !== "") {
        const changeDescriptionPart = currentValue.substring(currentValue.indexOf(':') + 1).trim();
        const parameterTitle = currentValue.substring(0, currentValue.indexOf(':')).trim(); 

        if (changeDescriptionPart) {
             const formattedChangeDesc = changeDescriptionPart.charAt(0).toLowerCase() + changeDescriptionPart.slice(1);
             changeTexts.push(`${parameterTitle}: ${formattedChangeDesc}`);
        }
    }
    state.previousBodyParams[paramKey] = currentValue;
    return currentValue;
}
