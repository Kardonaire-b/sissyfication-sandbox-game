import { state } from '../state.js';
import { t } from '../i18n.js';
import { DOM_CACHE } from '../ui.js';

/**
 * –ö–∞—Ä—Ç–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
 */
export const LOG_CLASS_MAP = new Map([
    ['default', 'log-default'],
    ['money-gain', 'log-money-gain'],
    ['money-loss', 'log-money-loss'],
    ['hormone-change', 'log-hormone-change'],
    ['progress-change', 'log-progress-change'],
    ['discovery', 'log-discovery'],
    ['important', 'log-important'],
    ['stepmom-dialogue', 'log-stepmom-dialogue'],
]);

/**
 * –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ª–æ–≥–∞: –º–µ—Ç–∫–∞ –∏ –∏–∫–æ–Ω–∫–∞
 */
const LOG_TYPE_META = {
    'default'         : { label: '–†–∞–∑–Ω–æ–µ',         icon: 'üìÑ' },
    'money-gain'      : { label: '–î–æ—Ö–æ–¥',          icon: 'üí∞' },
    'money-loss'      : { label: '–¢—Ä–∞—Ç—ã',          icon: 'üí∏' },
    'hormone-change'  : { label: '–ì–æ—Ä–º–æ–Ω—ã',        icon: '‚ößÔ∏è' },
    'progress-change' : { label: '–ü—Ä–æ–≥—Ä–µ—Å—Å',       icon: 'üìà' },
    'discovery'       : { label: '–û—Ç–∫—Ä—ã—Ç–∏—è',       icon: 'üí°' },
    'important'       : { label: '–í–∞–∂–Ω–æ–µ',         icon: '‚ùó' },
    'stepmom-dialogue': { label: '–î–∏–∞–ª–æ–≥–∏',        icon: 'üí¨' }
};

// –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä ("all" = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë)
let currentFilter = 'all';

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ <ul>, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–∏–π —Ä–∞–∑
let logListElement = null;
let controlsCreated = false;

function ensureControls() {
    if (controlsCreated || !DOM_CACHE.logContainer) return;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–¥‚Äê–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    DOM_CACHE.logContainer.innerHTML = '';

    const controlsDiv = document.createElement('div');
    controlsDiv.className = 'log-controls';

    // –ö–Ω–æ–ø–∫–∞ ¬´–í—Å–µ¬ª
    const allBtn = document.createElement('button');
    allBtn.textContent = '–í—Å–µ';
    allBtn.className = 'log-filter-btn selected';
    allBtn.onclick = () => { setFilter('all', allBtn); };
    controlsDiv.appendChild(allBtn);

    // –ö–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
    Object.keys(LOG_TYPE_META).forEach(typeId => {
        const btn = document.createElement('button');
        btn.textContent = LOG_TYPE_META[typeId].icon + ' ' + LOG_TYPE_META[typeId].label;
        btn.className = 'log-filter-btn';
        btn.onclick = () => { setFilter(typeId, btn); };
        controlsDiv.appendChild(btn);
    });

    // –ö–Ω–æ–ø–∫–∞ ¬´–û—á–∏—Å—Ç–∏—Ç—å¬ª
    const clearBtn = document.createElement('button');
    clearBtn.textContent = '–û—á–∏—Å—Ç–∏—Ç—å';
    clearBtn.className = 'log-clear-btn';
    clearBtn.onclick = () => {
        state.logMessages = [];
        renderLog();
    };
    controlsDiv.appendChild(clearBtn);

    DOM_CACHE.logContainer.appendChild(controlsDiv);

    logListElement = document.createElement('ul');
    logListElement.style.listStyleType = 'none';
    logListElement.style.padding = '0';
    logListElement.style.margin = '0';
    logListElement.className = 'log-list';

    DOM_CACHE.logContainer.appendChild(logListElement);

    controlsCreated = true;
}

function setFilter(filterId, btnElement) {
    currentFilter = filterId;
    // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤ selected —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const allButtons = DOM_CACHE.logContainer.querySelectorAll('.log-filter-btn');
    allButtons.forEach(b => b.classList.remove('selected'));
    btnElement.classList.add('selected');
    renderLog();
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥.
 * @param {string} msg
 * @param {string} [type='default']
 */
export function log(msg, type = 'default') {
    state.logMessages.unshift({
        text: msg,
        type: type,
        timestamp: state.day
    });
    if (state.logMessages.length > state.maxLogMessages) {
        state.logMessages.length = state.maxLogMessages;
    }
    renderLog();
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –ª–æ–≥ –≤ DOM.
 */
export function renderLog() {
    if (!DOM_CACHE.logContainer) return;

    ensureControls();

    if (!logListElement) return; // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Ñ–∏–ª—å—Ç—Ä
    const messages = currentFilter === 'all'
        ? state.logMessages
        : state.logMessages.filter(m => m.type === currentFilter);

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (messages.length === 0) {
        logListElement.innerHTML = `<li class="log-placeholder">${t('ui.log_cleared')}</li>`;
        return;
    }

    const listFrag = document.createDocumentFragment();

    messages.forEach((entry, index) => {
        const li = document.createElement('li');
        const meta = LOG_TYPE_META[entry.type] || LOG_TYPE_META['default'];
        const icon = meta.icon;
        li.innerHTML = `<span class="log-icon">${icon}</span> ${t('ui.log_entry', { day: entry.timestamp, text: entry.text })}`;
        li.className = `log-entry ${LOG_CLASS_MAP.get(entry.type) || LOG_CLASS_MAP.get('default')}`;
        if (index === 0) li.classList.add('log-updated');
        listFrag.appendChild(li);
    });

    logListElement.innerHTML = '';
    logListElement.appendChild(listFrag);

    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é (–≤–µ—Ä—Ö —Å–ø–∏—Å–∫–∞)
    logListElement.scrollTop = 0;
} 