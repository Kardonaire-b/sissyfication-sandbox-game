// --- START OF FILE js/descriptions.js ---

import * as C from './config.js';
import { state } from './state.js';
import { CLOTHING_ITEMS, CLOTHING_SLOTS } from './wardrobeConfig.js';

// –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ 'export' –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ui.js

export function getVoiceDescription(T, E, P) {
    let voicePitch = C.VOICE_PITCH_BASE_HZ - (T - E) * C.VOICE_PITCH_HORMONE_FACTOR;
    voicePitch = Math.max(80, Math.min(300, voicePitch));
    let specificDesc = "";
    if (E - T > C.VOICE_E_DOMINANT_THRESHOLD_FOR_CHANGE_2 && P > C.VOICE_P_THRESHOLD_FOR_CHANGE_2) {
        specificDesc = "–ó–≤—É—á–∏—Ç –∑–∞–º–µ—Ç–Ω–æ –≤—ã—à–µ, –Ω–µ–∂–Ω–µ–µ, –ø–æ—á—Ç–∏ –Ω–µ—É–∑–Ω–∞–≤–∞–µ–º–æ.";
    } else if (E - T > C.VOICE_E_DOMINANT_THRESHOLD_FOR_CHANGE_1) {
        specificDesc = "–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º—è–≥—á–µ –∏ –≤—ã—à–µ, —Ç–µ—Ä—è–µ—Ç –≥—Ä—É–±—ã–µ –Ω–æ—Ç–∫–∏.";
    } else if (T - E > C.VOICE_T_DOMINANT_THRESHOLD) {
        specificDesc = "–ù–∏–∑–∫–∏–π, —Å –±–∞—Ä—Ö–∞—Ç–Ω—ã–º–∏ –º—É–∂—Å–∫–∏–º–∏ –æ–±–µ—Ä—Ç–æ–Ω–∞–º–∏.";
    } else {
        specificDesc = "–¢–µ–º–±—Ä –Ω–∞ –≥—Ä–∞–Ω–∏, –∞–Ω–¥—Ä–æ–≥–∏–Ω–Ω—ã–π, –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π.";
    }
    return `üé§ –ì–æ–ª–æ—Å: ${voicePitch.toFixed(0)} –ì—Ü. ${specificDesc}`;
}

export function getSkinDescription(T, E, P, E_is_dominant, T_is_dominant) {
    let skinDescText = "üíß –ö–æ–∂–∞: ";
    if (E_is_dominant && E > C.SKIN_E_DOMINANT_THRESHOLD_FOR_SOFTNESS) {
        skinDescText += P > C.SKIN_P_THRESHOLD_SOFT_2 ? "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –≥–ª–∞–¥–∫–∞—è, —à–µ–ª–∫–æ–≤–∏—Å—Ç–∞—è –Ω–∞ –æ—â—É–ø—å, –ø–æ—Ä—ã –ø–æ—á—Ç–∏ –Ω–µ–≤–∏–¥–∏–º—ã. –õ—ë–≥–∫–∏–π —Ä—É–º—è–Ω–µ—Ü." :
            P > C.SKIN_P_THRESHOLD_SOFT_1 ? "–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—â—É—Ç–∏–º–æ –º—è–≥—á–µ, –Ω–µ–∂–Ω–µ–µ, —É—Ö–æ–¥–∏—Ç –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫." :
            "–ü–æ—è–≤–ª—è–µ—Ç—Å—è –º—è–≥–∫–æ—Å—Ç—å, –º–µ–Ω–µ–µ –∂–∏—Ä–Ω–∞—è.";
        if (E > C.SKIN_E_THRESHOLD_FOR_THINNING && P > C.SKIN_P_THRESHOLD_FOR_THINNING) {
            skinDescText += " –ö–∞–∂–µ—Ç—Å—è —Ç–æ–Ω—å—à–µ, –≤–µ–Ω–∫–∏ –Ω–∞ –∑–∞–ø—è—Å—Ç—å—è—Ö –∏ –≥—Ä—É–¥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∏–¥–Ω—ã –æ—Ç—á–µ—Ç–ª–∏–≤–µ–µ.";
        }
    } else if (T_is_dominant && T > C.SKIN_T_DOMINANT_THRESHOLD_FOR_ROUGHNESS) {
        skinDescText += "–ü–ª–æ—Ç–Ω–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ–ª–µ–µ —Å–∫–ª–æ–Ω–Ω–∞—è –∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏ –∏ –∞–∫–Ω–µ. –ü–æ—Ä—ã –∑–∞–º–µ—Ç–Ω—ã.";
    } else {
        skinDescText += "–û–±—ã—á–Ω–∞—è, –Ω–æ —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –∑–∞–º–µ—á–∞—Ç—å —Ç–æ–Ω–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –µ—ë —Ç–µ–∫—Å—Ç—É—Ä–µ.";
    }
    return skinDescText;
}

export function getBodyHairDescription(T, E, P, E_is_dominant, T_is_dominant) {
    let bodyHairDescText = "üåø –í–æ–ª–æ—Å—ã –Ω–∞ —Ç–µ–ª–µ/–ª–∏—Ü–µ: ";
    if (E_is_dominant && E > C.BODYHAIR_E_DOMINANT_THRESHOLD_FOR_REDUCTION && P > C.BODYHAIR_P_THRESHOLD_FOR_REDUCTION) {
        bodyHairDescText += "–†–æ—Å—Ç –≤–æ–ª–æ—Å –Ω–∞ —Ç–µ–ª–µ –∑–∞–º–µ–¥–ª–∏–ª—Å—è, –æ–Ω–∏ —Å—Ç–∞–ª–∏ —Ç–æ–Ω—å—à–µ –∏ —Å–≤–µ—Ç–ª–µ–µ. ";
        if (T < C.BODYHAIR_T_THRESHOLD_FOR_FACIAL_PUBESCENCE && P > C.BODYHAIR_P_THRESHOLD_FOR_FACIAL_PUBESCENCE) {
            bodyHairDescText += "–©–µ—Ç–∏–Ω–∞ –Ω–∞ –ª–∏—Ü–µ –ø–æ—á—Ç–∏ –Ω–µ —Ä–∞—Å—Ç–µ—Ç, –∏–ª–∏ —Å—Ç–∞–ª–∞ –ø—É—à–∫–æ–≤–æ–π.";
        } else if (T < C.BODYHAIR_T_THRESHOLD_FOR_FACIAL_SLOWDOWN) {
            bodyHairDescText += "–†–æ—Å—Ç —â–µ—Ç–∏–Ω—ã –∑–∞–º–µ–¥–ª–µ–Ω, –±—Ä–∏—Ç—å—ë —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∂–µ.";
        }
    } else if (T_is_dominant && T > C.BODYHAIR_T_DOMINANT_THRESHOLD_FOR_THICK) {
        bodyHairDescText += "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç –≤–æ–ª–æ—Å –Ω–∞ —Ç–µ–ª–µ –∏ –ª–∏—Ü–µ, –≥—É—Å—Ç–∞—è —â–µ—Ç–∏–Ω–∞.";
    } else {
        bodyHairDescText += "–ë–µ–∑ –æ—Å–æ–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.";
    }
    return bodyHairDescText;
}

export function getBreastDescription(E, P) {
    let breastDescText = "üçà –ì—Ä—É–¥—å: ";
    let breastDevStageRaw = 0;
    if (E > C.BREAST_E_THRESHOLD_START_BUDDING && P > C.BREAST_P_THRESHOLD_START_BUDDING) {
        breastDevStageRaw = 1 + (Math.max(0, E - C.BREAST_E_THRESHOLD_START_BUDDING) / C.BREAST_E_UNITS_PER_STAGE) *
            (C.BREAST_PROGRESS_FACTOR_BASE + P / C.BREAST_PROGRESS_FACTOR_SCALE);
    }
    const currentBreastDevStage = Math.min(C.BREAST_MAX_DEV_STAGE, Math.floor(breastDevStageRaw));
    if (currentBreastDevStage === 0) breastDescText += "–ê–±—Å–æ–ª—é—Ç–Ω–æ –ø–ª–æ—Å–∫–∞—è.";
    else if (currentBreastDevStage === 1) breastDescText += `–ü–æ—è–≤–∏–ª–∏—Å—å –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–µ —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è –ø–æ–¥ —Å–æ—Å–∫–∞–º–∏ (E:${E.toFixed(0)}, P:${P}%).`;
    else if (currentBreastDevStage === 2) breastDescText += `–ù–µ–±–æ–ª—å—à–∞—è, –Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞—è (—Ä–∞–∑–º–µ—Ä A). –°–æ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å. (E:${E.toFixed(0)}, P:${P}%).`;
    else if (currentBreastDevStage === 3) breastDescText += `–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —É–ø—Ä—É–≥–∞—è (–±–ª–∏–∂–µ –∫ B). (E:${E.toFixed(0)}, P:${P}%).`;
    else breastDescText += `–ü—ã—à–Ω–∞—è, –º—è–≥–∫–∞—è, —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è (—Ä–∞–∑–º–µ—Ä C+!). (E:${E.toFixed(0)}, P:${P}%).`;
    return breastDescText;
}

export function getFigureDescription(T, E, P, E_is_dominant, T_is_dominant) {
    let figureDescText = "üçë –§–∏–≥—É—Ä–∞: ";
    const whr_change_potential = C.FIGURE_WHR_BASE - C.FIGURE_WHR_TARGET_FEMALE;
    let whr_progress_to_female_target = 0;
    if (E_is_dominant && E > C.FIGURE_E_DOMINANT_THRESHOLD_FOR_WHR_CHANGE) {
        whr_progress_to_female_target = Math.min(1, (E - C.FIGURE_E_DOMINANT_THRESHOLD_FOR_WHR_CHANGE) / C.FIGURE_E_UNITS_FOR_WHR_PROGRESS) * (P / C.MAX_PROGRESS);
    }
    const current_whr = (C.FIGURE_WHR_BASE - whr_change_potential * whr_progress_to_female_target).toFixed(2);
    figureDescText += `–¢–∞–ª–∏—è/–±–µ–¥—Ä–∞: ${current_whr}. `;
    if (E_is_dominant && E > C.FIGURE_E_DOMINANT_THRESHOLD_FOR_FAT_REDISTRIBUTION && P > C.FIGURE_P_THRESHOLD_FOR_FAT_REDISTRIBUTION) {
        figureDescText += "–ñ–∏—Ä –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –±–µ–¥—Ä–∞ –∏ —è–≥–æ–¥–∏—Ü—ã. –¢–∞–ª–∏—è –∏–∑—è—â–Ω–µ–µ.";
    } else if (T_is_dominant && T > C.FIGURE_T_DOMINANT_THRESHOLD_FOR_MALE_FAT) {
        figureDescText += "–ñ–∏—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –∂–∏–≤–æ—Ç–∞, —Ñ–∏–≥—É—Ä–∞ –º–∞—Å–∫—É–ª–∏–Ω–Ω–∞—è.";
    } else if (P > C.FIGURE_P_THRESHOLD_FOR_SUBTLE_SOFTENING) {
        figureDescText += "–ö–æ–Ω—Ç—É—Ä—ã —Ç–µ–ª–∞ –Ω–µ—É–ª–æ–≤–∏–º–æ —Å–º—è–≥—á–∞—é—Ç—Å—è.";
    }
    return figureDescText;
}

export function getMuscleDescription(T, E, P, E_is_dominant) {
    let muscleDescText = "üí™ –ú—ã—à—Ü—ã: ";
    if (T > C.MUSCLE_T_HIGH_THRESHOLD_FOR_BULK && !E_is_dominant) {
        muscleDescText += P < C.MUSCLE_P_THRESHOLD_FOR_BULK_SOFTENING ? "–†–∞–∑–≤–∏—Ç—ã–µ, —Ä–µ–ª—å–µ—Ñ–Ω—ã–µ." : "–ö—Ä–µ–ø–∫–∏–µ, –Ω–æ —Ç–µ—Ä—è—é—Ç —Ç–≤–µ—Ä–¥–æ—Å—Ç—å.";
    } else if (T > C.MUSCLE_T_MID_THRESHOLD_FOR_TONE && !E_is_dominant) {
        muscleDescText += "–£–º–µ—Ä–µ–Ω–Ω–æ —Ä–∞–∑–≤–∏—Ç—ã, –≤ —Ç–æ–Ω—É—Å–µ.";
    } else if (E_is_dominant && E > C.MUSCLE_E_DOMINANT_THRESHOLD_FOR_LOSS) {
        muscleDescText += `–£–º–µ–Ω—å—à–∏–ª–∏—Å—å, —Å—Ç–∞–ª–∏ –º—è–≥—á–µ. –°–∏–ª–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å (T:${T.toFixed(0)}).`;
    } else {
        muscleDescText += `–°–ª–∞–±—ã–µ, –±–µ–∑ —Ä–µ–ª—å–µ—Ñ–∞. (T:${T.toFixed(0)})`;
    }
    return muscleDescText;
}

export function getPenisDescription(T, E, P, E_is_dominant) {
    let penisShrinkageFactor = ((E - C.BASE_E) * C.GENITAL_PENIS_E_SHRINK_FACTOR + Math.max(0, 50 - T) * C.GENITAL_PENIS_LOW_T_SHRINK_FACTOR) *
        (C.GENITAL_PROGRESS_ACCELERATOR_BASE + P / C.GENITAL_PROGRESS_ACCELERATOR_SCALE);
    penisShrinkageFactor = Math.max(0, penisShrinkageFactor);
    const penisLengthCm = Math.max(C.GENITAL_PENIS_MIN_CM, C.GENITAL_PENIS_BASE_CM - penisShrinkageFactor).toFixed(1);
    let erectionQuality = '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è';
    if (T < C.GENITAL_ERECTION_T_LOW_THRESHOLD_ALMOST_NONE && E_is_dominant && P > C.GENITAL_ERECTION_P_LOW_THRESHOLD_ALMOST_NONE) erectionQuality = '–ø–æ—á—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    else if (T < C.GENITAL_ERECTION_T_LOW_THRESHOLD_VERY_WEAK || (E_is_dominant && E > C.GENITAL_ERECTION_E_HIGH_THRESHOLD_VERY_WEAK)) erectionQuality = '–æ—á–µ–Ω—å —Å–ª–∞–±–∞—è';
    else if (T < C.GENITAL_ERECTION_T_LOW_THRESHOLD_WEAK || (E_is_dominant && E > C.GENITAL_ERECTION_E_HIGH_THRESHOLD_WEAK)) erectionQuality = '—Å–Ω–∏–∂–µ–Ω–∞, –º–µ–Ω–µ–µ —Ç–≤–µ—Ä–¥–∞—è';
    let penisDescText;
    if (P > C.GENITAL_P_THRESHOLD_FOR_CLIT_TEXT && E_is_dominant && parseFloat(penisLengthCm) < C.GENITAL_PENIS_CLIT_TRANSITION_CM) {
        penisDescText = `üéÄ –ö–ª–∏—Ç–æ—Ä: ${penisLengthCm} —Å–º. –°—Ç–∞–ª –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º. `;
    } else {
        penisDescText = `üçÜ –ü–µ–Ω–∏—Å: ${penisLengthCm} —Å–º. `;
    }
    penisDescText += `–≠—Ä–µ–∫—Ü–∏—è: ${erectionQuality}.`;
    return penisDescText;
}

export function getTesticlesDescription(T, E, P, E_is_dominant) {
    let testicleShrinkageFactor = ((E - C.BASE_E) * C.GENITAL_TESTICLES_E_SHRINK_FACTOR + Math.max(0, 40 - T) * C.GENITAL_TESTICLES_LOW_T_SHRINK_FACTOR) *
        (C.GENITAL_PROGRESS_ACCELERATOR_BASE + P / C.GENITAL_PROGRESS_ACCELERATOR_SCALE);
    testicleShrinkageFactor = Math.max(0, testicleShrinkageFactor);
    const testicleVolume = Math.max(C.GENITAL_TESTICLES_MIN_VOL_ML, C.GENITAL_TESTICLES_BASE_VOL_ML - testicleShrinkageFactor).toFixed(1);
    const testicleTexture = (E_is_dominant && E > C.GENITAL_TESTICLES_E_THRESHOLD_SOFT_TEXTURE && P > C.GENITAL_TESTICLES_P_THRESHOLD_SOFT_TEXTURE) ? '–º—è–≥–∫–∏–µ, —É–º–µ–Ω—å—à–∏–≤—à–∏–µ—Å—è' : '—É–ø—Ä—É–≥–∏–µ';
    let testiclesDescText = `ü•ö –Ø–∏—á–∫–∏: –æ–±—ä—ë–º ~${testicleVolume} –º–ª, ${testicleTexture}. `;
    if (E_is_dominant && E > C.GENITAL_TESTICLES_E_THRESHOLD_ATROPHY && P > C.GENITAL_TESTICLES_P_THRESHOLD_ATROPHY && parseFloat(testicleVolume) < C.GENITAL_TESTICLES_ATROPHY_VOL_ML) {
        testiclesDescText += "–ü–æ—á—Ç–∏ –∞—Ç—Ä–æ—Ñ–∏—Ä–æ–≤–∞–ª–∏—Å—å.";
    }
    return testiclesDescText;
}

export function getFeelingDescription(E, P, E_is_dominant, hormonalBalanceFactor) {
    let feelingDesc = "‚ú® –û—â—É—â–µ–Ω–∏—è: ";
    if (P > C.FEELING_P_THRESHOLD_PERFECT_SISSY && E_is_dominant && E > C.FEELING_E_THRESHOLD_PERFECT_SISSY) feelingDesc += "–í–æ–ø–ª–æ—â–µ–Ω–∏–µ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ì–∞—Ä–º–æ–Ω–∏—è.";
    else if (P > C.FEELING_P_THRESHOLD_REAL_SISSY && E_is_dominant) feelingDesc += "–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–∏—Å—Å–∏. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç.";
    else if (P > C.FEELING_P_THRESHOLD_TRANSFORMATION_FULL_SWING && (E_is_dominant || hormonalBalanceFactor > C.FEELING_HORMONAL_BALANCE_THRESHOLD_TRANSFORMATION_FULL_SWING)) feelingDesc += "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–¥–µ—Ç –ø–æ–ª–Ω—ã–º —Ö–æ–¥–æ–º! –ü—Ä–∏–ª–∏–≤ —Å–∏—Å—Å–∏-—ç–Ω–µ—Ä–≥–∏–∏.";
    else if (P > C.FEELING_P_THRESHOLD_FIRST_WHISPERS) feelingDesc += "–ü–µ—Ä–≤—ã–µ —à–µ–ø–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π. –¢–µ–ª–æ –º–µ–Ω—è–µ—Ç—Å—è, —ç—Ç–æ –≤–æ–ª–Ω—É–µ—Ç.";
    else feelingDesc += "–°–∞–º–æ–µ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏. –í–µ—Ç–µ—Ä–æ–∫ –ø–µ—Ä–µ–º–µ–Ω –µ–¥–≤–∞ –∫–æ—Å–Ω—É–ª—Å—è.";
    return feelingDesc;
}

export function getCurrentOutfitDescription() {
    const { currentOutfit } = state;
    const descriptions = [];

    if (currentOutfit[CLOTHING_SLOTS.FULL_BODY]) {
        descriptions.push(`—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–µ—Ç–∞ –≤: ${CLOTHING_ITEMS[currentOutfit[CLOTHING_SLOTS.FULL_BODY]].name.toLowerCase()}`);
    } else {
        const top = currentOutfit[CLOTHING_SLOTS.TOP] ? CLOTHING_ITEMS[currentOutfit[CLOTHING_SLOTS.TOP]].name.toLowerCase() : null;
        const bottom = currentOutfit[CLOTHING_SLOTS.BOTTOM] ? CLOTHING_ITEMS[currentOutfit[CLOTHING_SLOTS.BOTTOM]].name.toLowerCase() : null;
        if (top && bottom) descriptions.push(`–Ω–∞ —Ç–µ–±–µ –Ω–∞–¥–µ—Ç–∞ ${top} –∏ ${bottom}`);
        else if (top) descriptions.push(`–Ω–∞ —Ç–µ–±–µ –Ω–∞–¥–µ—Ç–∞ ${top}`);
        else if (bottom) descriptions.push(`–Ω–∞ —Ç–µ–±–µ –Ω–∞–¥–µ—Ç–∞ ${bottom}`);
    }

    const underwearTop = currentOutfit[CLOTHING_SLOTS.UNDERWEAR_TOP] ? CLOTHING_ITEMS[currentOutfit[CLOTHING_SLOTS.UNDERWEAR_TOP]].name.toLowerCase() : null;
    const underwearBottom = currentOutfit[CLOTHING_SLOTS.UNDERWEAR_BOTTOM] ? CLOTHING_ITEMS[currentOutfit[CLOTHING_SLOTS.UNDERWEAR_BOTTOM]].name.toLowerCase() : null;
    let underwearDesc = "";
    if (underwearTop && underwearBottom) underwearDesc = `${underwearTop} –∏ ${underwearBottom}`;
    else if (underwearTop) underwearDesc = underwearTop;
    else if (underwearBottom) underwearDesc = underwearBottom;

    if (underwearDesc) {
        const connector = descriptions.length > 0 ? ", –∞ –ø–æ–¥ –æ–¥–µ–∂–¥–æ–π" : "–ü–æ–¥ –æ–¥–µ–∂–¥–æ–π";
        descriptions.push(`${connector} —É —Ç–µ–±—è ${underwearDesc}`);
    }

    if (currentOutfit[CLOTHING_SLOTS.SHOES]) {
        const shoes = CLOTHING_ITEMS[currentOutfit[CLOTHING_SLOTS.SHOES]].name.toLowerCase();
        const connector = descriptions.length > 0 ? ", –Ω–∞ –Ω–æ–≥–∞—Ö -" : "–ù–∞ –Ω–æ–≥–∞—Ö -";
        descriptions.push(`${connector} ${shoes}`);
    }

    if (descriptions.length === 0) {
        return "üëï –ù–∞—Ä—è–¥: –¢—ã —Å–µ–π—á–∞—Å –Ω–∏ –≤–æ —á—Ç–æ –Ω–µ –æ–¥–µ—Ç–∞.";
    }

    let finalDescription = descriptions.join(' ').trim();
    finalDescription = finalDescription.charAt(0).toUpperCase() + finalDescription.slice(1) + '.';
    return `üëï –ù–∞—Ä—è–¥: ${finalDescription}`;
}