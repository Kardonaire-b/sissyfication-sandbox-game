import { actions } from './actions.js';
import { el } from './domUtils.js';
import { state } from './state.js';
import * as C from './config.js';
import { CLOTHING_ITEMS, CLOTHING_SLOTS } from './wardrobeConfig.js';
import { equipItem, unequipItem } from './wardrobeLogic.js';
import {
    getVoiceDescription, getSkinDescription, getBodyHairDescription,
    getBreastDescription, getFigureDescription, getMuscleDescription,
    getPenisDescription, getTesticlesDescription, getFeelingDescription,
    getCurrentOutfitDescription
} from './descriptions.js';

// --- –ö—ç—à–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è UI ---

let fullBodyDescriptionForModalStore = "";
const choiceButtonCache = {};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ —á–∏—Å—Ç–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∏–ø–∞ –ª–æ–≥–∞ –∫ CSS-–∫–ª–∞—Å—Å—É
const LOG_CLASS_MAP = new Map([
    ['default', 'log-default'],
    ['money-gain', 'log-money-gain'],
    ['money-loss', 'log-money-loss'],
    ['hormone-change', 'log-hormone-change'],
    ['progress-change', 'log-progress-change'],
    ['discovery', 'log-discovery'],
    ['important', 'log-important'],
    ['stepmom-dialogue', 'log-stepmom-dialogue'],
]);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∫–æ–Ω–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å switch –∏–∑ renderChoices
const ACTION_ICON_MAP = {
    'work': 'üíº ',
    't_blocker': 'üíä ',
    't_pill': '‚ôÇÔ∏è ',
    'e_pill': '‚ôÄÔ∏è ',
    'browse_internet': 'üåê ',
    'rest': 'üò¥ ',
    'save_game': 'üíæ ',
    'load_game': 'üìÇ ',
    'reset_game': 'üîÑ '
    // 'read_book' –∏–º–µ–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∏–∫–æ–Ω–∫—É, –æ—Å—Ç–∞–≤–∏–º –µ–µ –≤ –ª–æ–≥–∏–∫–µ
};


// --- –§—É–Ω–∫—Ü–∏–∏ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

export function log(msg, type = 'default') {
    state.logMessages.unshift({
        text: msg,
        type: type,
        timestamp: state.day
    });

    if (state.logMessages.length > state.maxLogMessages) {
        state.logMessages.length = state.maxLogMessages;
    }

    renderLog();
}

export function renderLog() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DocumentFragment –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ DOM-–æ–ø–µ—Ä–∞—Ü–∏–π
    const fragment = document.createDocumentFragment();
    const ul = document.createElement('ul');
    ul.style.listStyleType = 'none';
    ul.style.padding = '0';
    ul.style.margin = '0';

    if (state.logMessages.length === 0) {
        el.actionLogOutput.textContent = "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.";
        el.actionLogOutput.className = 'log-default';
        return;
    }

    state.logMessages.forEach((entry, index) => {
        const li = document.createElement('li');
        li.textContent = `–î–µ–Ω—å ${entry.timestamp}: ${entry.text}`;
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏–∑ Map
        li.className = `log-entry ${LOG_CLASS_MAP.get(entry.type) || LOG_CLASS_MAP.get('default')}`;
        
        if (index === 0) {
            li.classList.add('log-updated'); // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        }
        ul.appendChild(li);
    });

    fragment.appendChild(ul);
    el.actionLogOutput.innerHTML = '';
    el.actionLogOutput.appendChild(fragment);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const latestEntry = state.logMessages[0];
    if (latestEntry) {
        el.actionLogOutput.className = `log-container ${LOG_CLASS_MAP.get(latestEntry.type) || LOG_CLASS_MAP.get('default')}`;
    }
}


// --- –§—É–Ω–∫—Ü–∏–∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---

export function updateTabsVisibility() {
    if (!Array.isArray(el.tabs)) {
        console.error('el.tabs is not an array');
        return;
    }

    let tabSwitched = false;
    const isHormoneTabVisible = state.hormonesUnlocked;

    // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≥–æ—Ä–º–æ–Ω–æ–≤
    const hormoneTab = el.tabs.find(btn => btn.dataset.tab === 'hormone');
    if (hormoneTab) {
        hormoneTab.style.display = isHormoneTabVisible ? '' : 'none';
    }

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–ª–∞ –Ω–µ–≤–∏–¥–∏–º–æ–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
    if (!isHormoneTabVisible && state.tab === 'hormone') {
        state.tab = 'income';
        tabSwitched = true;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
    el.tabs.forEach(btn => {
        btn.classList.toggle('selected', btn.dataset.tab === state.tab);
    });
    
    // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    if (tabSwitched) {
        renderCurrentTabContent();
    }
}

export function updateProgressDisplay() {
    const isUnlocked = state.hormonesUnlocked;
    el.progressTitle.textContent = isUnlocked ? "–ü—Ä–æ–≥—Ä–µ—Å—Å" : "–û—Ç–∫—Ä—ã—Ç–∏—è";
    el.progressIcon.textContent = isUnlocked ? "üìà" : "üí°";
    
    const currentValue = isUnlocked ? state.progress : state.discoveryPoints;
    const maxValue = isUnlocked ? C.MAX_PROGRESS : C.MAX_DISCOVERY_POINTS;
    const unit = isUnlocked ? '%' : '';

    el.prog.textContent = `${currentValue}${unit} / ${maxValue}${unit}`;
    el.pbar.style.width = `${(currentValue / maxValue) * 100}%`;
}


// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Data-Driven –ø–æ–¥—Ö–æ–¥–∞
const bodyPartDescriptors = [
    { key: 'voice',           func: getVoiceDescription,         args: (T, E, P) => [T, E, P] },
    { key: 'skin',            func: getSkinDescription,          args: (T, E, P, E_dom, T_dom) => [T, E, P, E_dom, T_dom] },
    { key: 'bodyHair',        func: getBodyHairDescription,      args: (T, E, P, E_dom, T_dom) => [T, E, P, E_dom, T_dom] },
    { key: 'breast',          func: getBreastDescription,        args: (T, E, P) => [E, P] },
    { key: 'figure',          func: getFigureDescription,        args: (T, E, P, E_dom, T_dom) => [T, E, P, E_dom, T_dom] },
    { key: 'muscle',          func: getMuscleDescription,        args: (T, E, P, E_dom) => [T, E, P, E_dom] },
    { key: 'genitalsPenis',     func: getPenisDescription,         args: (T, E, P, E_dom) => [T, E, P, E_dom] },
    { key: 'genitalsTesticles', func: getTesticlesDescription,     args: (T, E, P, E_dom) => [T, E, P, E_dom] },
];

function trackAndLogChange(paramKey, currentValue, changeTexts) {
    const previousValue = state.previousBodyParams[paramKey];
    if (currentValue !== previousValue && previousValue !== undefined && previousValue !== "") {
        const changeDescriptionPart = currentValue.substring(currentValue.indexOf(':') + 1).trim();
        const parameterTitle = currentValue.substring(0, currentValue.indexOf(':')).trim();
        if (changeDescriptionPart) {
            const formattedChangeDesc = changeDescriptionPart.charAt(0).toLowerCase() + changeDescriptionPart.slice(1);
            changeTexts.push(`${parameterTitle}: ${formattedChangeDesc}`);
        }
    }
    state.previousBodyParams[paramKey] = currentValue; // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return currentValue;
}

export function updateBody() {
    // –ù–∞—á–∞–ª–æ –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≥–æ—Ä–º–æ–Ω–æ–≤
    if (!state.hormonesUnlocked) {
        const preUnlockLines = [
            "–¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä. –ö–∞–∫–∏–µ-—Ç–æ —Å–º—É—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –∏ –º—ã—Å–ª–∏ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å–µ—â–∞—é—Ç —Ç–µ–±—è, –Ω–æ –ø–æ–∫–∞ –Ω–µ—è—Å–Ω–æ, –∫ —á–µ–º—É –æ–Ω–∏ –≤–µ–¥—É—Ç.",
            `–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –æ—â—É—â–µ–Ω–∏—è: ${state.discoveryPoints > 15 ? "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –≤—Å–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏." : "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –æ–±—ã—á–Ω—ã–µ –º—ã—Å–ª–∏."}`,
            `–û—á–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏–π: ${state.discoveryPoints}/${C.DISCOVERY_POINTS_TO_UNLOCK_HORMONES}`
        ];
        el.bodyDesc.textContent = fullBodyDescriptionForModalStore = preUnlockLines.join('\n\n');
        return;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
    const T = state.emaT, E = state.emaE, P = state.progress;
    const T_is_dominant = T > E + 10;
    const E_is_dominant = E > T + 5;
    const hormonalBalanceFactor = Math.max(0, Math.min(100, (E - T + C.MAX_HORMONE_LEVEL) / 2));
    
    state.recentBodyChanges = [];
    
    // Data-driven –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π
    const allBodyLines = bodyPartDescriptors.map(descriptor => {
        const args = descriptor.args(T, E, P, E_is_dominant, T_is_dominant);
        const currentValue = descriptor.func(...args);
        return trackAndLogChange(descriptor.key, currentValue, state.recentBodyChanges);
    });

    const feelingDesc = getFeelingDescription(E, P, E_is_dominant, hormonalBalanceFactor);
    allBodyLines.push(feelingDesc);
    allBodyLines.push(getCurrentOutfitDescription());

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    fullBodyDescriptionForModalStore = allBodyLines.join('\n\n');

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    const summaryLines = [feelingDesc, getCurrentOutfitDescription()];
    if (state.recentBodyChanges.length > 0) {
        summaryLines.push("\n‚ùó –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:");
        const maxChangesToShowInSummary = 3;
        state.recentBodyChanges.slice(0, maxChangesToShowInSummary).forEach(change => {
            summaryLines.push(`  - ${change}`);
        });
        if (state.recentBodyChanges.length > maxChangesToShowInSummary) {
            summaryLines.push(`  ... –∏ –µ—â–µ ${state.recentBodyChanges.length - maxChangesToShowInSummary} –∏–∑–º.`);
        }
    } else if (state.day > 1) {
        summaryLines.push("\n–ó–∞–º–µ—Ç–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.");
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É
    el.bodyDesc.innerHTML = '';
    const summaryFragment = document.createDocumentFragment();
    summaryLines.forEach(line => {
        const p = document.createElement('p');
        p.textContent = line;
        p.style.whiteSpace = 'pre-wrap';
        if (line.includes('  - ')) p.style.marginLeft = "1em";
        if (line.startsWith("\n‚ùó") || line.startsWith("\n–ó–∞–º–µ—Ç–Ω—ã—Ö")) p.style.marginTop = "0.5em";
        summaryFragment.appendChild(p);
    });
    
    let modalButton = document.createElement('button');
    modalButton.id = 'open-body-details-button';
    modalButton.className = 'choice-button';
    modalButton.textContent = 'üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Å–º–æ—Ç—Ä —Ç–µ–ª–∞';
    modalButton.style.marginTop = '15px';
    modalButton.onclick = openBodyDetailsModal;
    summaryFragment.appendChild(modalButton);

    el.bodyDesc.appendChild(summaryFragment);
}


// --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–æ–∫ (–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –∏ –ì–∞—Ä–¥–µ—Ä–æ–±) ---

function renderCurrentTabContent() {
    if (state.tab === 'wardrobe') {
        renderWardrobeUI();
    } else {
        renderChoices();
    }
}

export function renderWardrobeUI() {
    const fragment = document.createDocumentFragment();

    const equippedSection = createWardrobeSection('–°–µ–π—á–∞—Å –Ω–∞–¥–µ—Ç–æ:', state.currentOutfit, 'unequip');
    
    const currentlyWornItemIds = Object.values(state.currentOutfit).filter(id => id !== null);
    
    const availableItems = state.ownedClothes.filter(itemId => !currentlyWornItemIds.includes(itemId));
    
    const availableItemsBySlot = {};
    availableItems.forEach(itemId => {
        const item = CLOTHING_ITEMS[itemId];
        if (!availableItemsBySlot[item.slot]) {
            availableItemsBySlot[item.slot] = [];
        }
        availableItemsBySlot[item.slot].push(itemId);
    });

    const ownedSection = createWardrobeSection('–í —à–∫–∞—Ñ—É:', availableItemsBySlot, 'equip');
    
    fragment.appendChild(equippedSection);
    fragment.appendChild(ownedSection);
    el.choices.innerHTML = '';
    el.choices.appendChild(fragment);
}

function createWardrobeSection(title, items, actionType) {
    const section = document.createElement('div');
    section.className = 'wardrobe-section';
    const h3 = document.createElement('h3');
    h3.textContent = title;
    section.appendChild(h3);

    let hasItems = false;
    for (const slotName in items) {
        const itemOrItems = items[slotName];
        if (!itemOrItems || (Array.isArray(itemOrItems) && itemOrItems.length === 0)) continue;

        const itemsArray = Array.isArray(itemOrItems) ? itemOrItems : [itemOrItems];
        itemsArray.forEach(itemId => {
            hasItems = true;
            const item = CLOTHING_ITEMS[itemId];
            const itemDiv = document.createElement('div');
            itemDiv.className = 'wardrobe-item-display';

            const itemNameSpan = document.createElement('span');
            const slotKeyName = Object.keys(CLOTHING_SLOTS).find(key => CLOTHING_SLOTS[key] === item.slot);
            itemNameSpan.textContent = `${item.name} (—Å–ª–æ—Ç: ${slotKeyName})`;
            itemDiv.appendChild(itemNameSpan);

            const button = document.createElement('button');
            button.className = 'choice-button wardrobe-button';
            if (actionType === 'equip') {
                button.textContent = '–ù–∞–¥–µ—Ç—å';
                button.onclick = () => equipItem(itemId);
            } else {
                button.textContent = '–°–Ω—è—Ç—å';
                button.onclick = () => unequipItem(item.slot);
            }
            itemDiv.appendChild(button);
            section.appendChild(itemDiv);
        });
    }

    if (!hasItems) {
        const p = document.createElement('p');
        p.textContent = actionType === 'equip' ? '–í —à–∫–∞—Ñ—É –ø—É—Å—Ç–æ –∏–ª–∏ –≤—Å—è –æ–¥–µ–∂–¥–∞ —É–∂–µ –Ω–∞–¥–µ—Ç–∞.' : '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–µ—Ç–æ.';
        section.appendChild(p);
    }
    return section;
}

export function renderChoices() {
    const fragment = document.createDocumentFragment();
    const actionsToDisplay = actions.filter(action => 
        action.tab === state.tab &&
        !(action.tab === 'hormone' && !state.hormonesUnlocked)
    );

    actionsToDisplay.forEach(action => {
        const buttonElement = choiceButtonCache[action.id]?.buttonElement || document.createElement('button');
        if (!choiceButtonCache[action.id]) {
            buttonElement.className = 'choice-button';
            buttonElement.addEventListener('click', action.handler.bind(action));
            choiceButtonCache[action.id] = { buttonElement };
        }

        let baseText = typeof action.text === 'function' ? action.text() : action.text;
        let icon = ACTION_ICON_MAP[action.id] || '';
        if (action.id === 'read_book') {
            icon = state.hormonesUnlocked ? 'üìñ ' : 'üìö ';
        }

        let currentText = icon + baseText;
        let isDisabled = (action.condition && !action.condition());

        if (action.cost > 0) {
            currentText += ` (‚Äì${action.cost}${C.CURRENCY_SYMBOL})`;
            if (state.money < action.cost) {
                isDisabled = true;
                currentText += ` (–ù—É–∂–Ω–æ: ${action.cost}${C.CURRENCY_SYMBOL})`;
            }
        } else if (action.id === 'work') {
            currentText += ` (+${C.WORK_INCOME}${C.CURRENCY_SYMBOL})`;
        }
        
        if (action.id === 't_blocker' && isDisabled) {
             currentText = `${icon}–ë–ª–æ–∫–∞—Ç–æ—Ä –¢ –∞–∫—Ç–∏–≤–µ–Ω (${state.t_blocker_active_days} –¥–Ω.)`;
        }

        buttonElement.textContent = currentText;
        buttonElement.disabled = isDisabled;
        fragment.appendChild(buttonElement);
    });
    
    el.choices.innerHTML = '';
    el.choices.appendChild(fragment);
}


// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ ---

export function updateStats() {
    el.day.textContent = state.day;
    el.money.textContent = `${state.money}${C.CURRENCY_SYMBOL}`;
    el.test.textContent = `${state.testosterone.toFixed(0)} / ${C.MAX_HORMONE_LEVEL}`;
    el.est.textContent = `${state.estrogen.toFixed(0)} / ${C.MAX_HORMONE_LEVEL}`;

    el.tbar.style.width = `${(state.testosterone / C.MAX_HORMONE_LEVEL) * 100}%`;
    el.ebar.style.width = `${(state.estrogen / C.MAX_HORMONE_LEVEL) * 100}%`;

    updateProgressDisplay();
    updateTabsVisibility();
    updateBody();
    renderCurrentTabContent();
}

export function openBodyDetailsModal() {
    if (el.modalOverlay && el.modalBodyDetailsContent) {
        el.modalBodyDetailsContent.innerHTML = fullBodyDescriptionForModalStore.replace(/\n/g, '<br>');
        el.modalOverlay.classList.add('active');
    }
}

export function closeBodyDetailsModal() {
    if (el.modalOverlay) {
        el.modalOverlay.classList.remove('active');
    }
}