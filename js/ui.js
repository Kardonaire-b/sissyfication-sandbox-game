import { actions } from './actions.js';
import { el } from './domUtils.js';
import { state } from './state.js';
import * as C from './config.js';
import { CLOTHING_ITEMS, CLOTHING_SLOTS } from './wardrobeConfig.js';
import { equipItem, unequipItem } from './wardrobeLogic.js';
import {
    getVoiceDescription, getSkinDescription, getBodyHairDescription,
    getBreastDescription, getFigureDescription, getMuscleDescription,
    getPenisDescription, getTesticlesDescription, getFeelingDescription,
    getCurrentOutfitDescription
} from './descriptions.js';
import { t } from './i18n.js'; // <-- –ò–ú–ü–û–†–¢

// --- –ö—ç—à–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è UI ---
let fullBodyDescriptionForModalStore = "";
const choiceButtonCache = {};

const LOG_CLASS_MAP = new Map([
    ['default', 'log-default'],
    ['money-gain', 'log-money-gain'],
    ['money-loss', 'log-money-loss'],
    ['hormone-change', 'log-hormone-change'],
    ['progress-change', 'log-progress-change'],
    ['discovery', 'log-discovery'],
    ['important', 'log-important'],
    ['stepmom-dialogue', 'log-stepmom-dialogue'],
]);

const ACTION_ICON_MAP = {
    'work': 'üíº ',
    't_blocker': 'üíä ',
    't_pill': '‚ôÇÔ∏è ',
    'e_pill': '‚ôÄÔ∏è ',
    'browse_internet': 'üåê ',
    'rest': 'üò¥ ',
    'save_game': 'üíæ ',
    'load_game': 'üìÇ ',
    'reset_game': 'üîÑ '
};

// --- –§—É–Ω–∫—Ü–∏–∏ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

export function log(msg, type = 'default') {
    state.logMessages.unshift({
        text: msg,
        type: type,
        timestamp: state.day
    });

    if (state.logMessages.length > state.maxLogMessages) {
        state.logMessages.length = state.maxLogMessages;
    }

    renderLog();
}

export function renderLog() {
    const fragment = document.createDocumentFragment();
    const ul = document.createElement('ul');
    ul.style.listStyleType = 'none';
    ul.style.padding = '0';
    ul.style.margin = '0';

    if (state.logMessages.length === 0) {
        el.actionLogOutput.textContent = t('ui.log_cleared');
        el.actionLogOutput.className = 'log-default';
        return;
    }

    state.logMessages.forEach((entry, index) => {
        const li = document.createElement('li');
        li.textContent = t('ui.log_entry', { day: entry.timestamp, text: entry.text });
        li.className = `log-entry ${LOG_CLASS_MAP.get(entry.type) || LOG_CLASS_MAP.get('default')}`;
        
        if (index === 0) {
            li.classList.add('log-updated');
        }
        ul.appendChild(li);
    });

    fragment.appendChild(ul);
    el.actionLogOutput.innerHTML = '';
    el.actionLogOutput.appendChild(fragment);

    const latestEntry = state.logMessages[0];
    if (latestEntry) {
        el.actionLogOutput.className = `log-container ${LOG_CLASS_MAP.get(latestEntry.type) || LOG_CLASS_MAP.get('default')}`;
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---

export function updateTabsVisibility() {
    if (!Array.isArray(el.tabs)) return;

    // –ù–û–í–û–ï –£–°–õ–û–í–ò–ï
    const isHormoneTabVisible = state.plotFlags.hormone_therapy_unlocked;

    const hormoneTab = el.tabs.find(btn => btn.dataset.tab === 'hormone');
    if (hormoneTab) {
        hormoneTab.style.display = isHormoneTabVisible ? '' : 'none';
    }

    if (!isHormoneTabVisible && state.tab === 'hormone') {
        state.tab = 'income';
        renderCurrentTabContent(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, —Ç.–∫. –≤–∫–ª–∞–¥–∫–∞ —Å–º–µ–Ω–∏–ª–∞—Å—å
    }

    el.tabs.forEach(btn => {
        btn.classList.toggle('selected', btn.dataset.tab === state.tab);
    });
}

export function updateProgressDisplay() {
    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    el.progressTitle.textContent = t('ui.progress');
    el.progressIcon.textContent = "üìà";
    
    const currentValue = state.progress;
    const maxValue = C.MAX_PROGRESS;
    const unit = '%';

    el.prog.textContent = `${currentValue}${unit} / ${maxValue}${unit}`;
    el.pbar.style.width = `${(currentValue / maxValue) * 100}%`;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Data-Driven –ø–æ–¥—Ö–æ–¥–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const bodyPartDescriptors = [
    { key: 'voice',           func: getVoiceDescription,         args: (T, E, P) => [T, E, P] },
    { key: 'skin',            func: getSkinDescription,          args: (T, E, P, E_dom, T_dom) => [T, E, P, E_dom, T_dom] },
    { key: 'bodyHair',        func: getBodyHairDescription,      args: (T, E, P, E_dom, T_dom) => [T, E, P, E_dom, T_dom] },
    { key: 'breast',          func: getBreastDescription,        args: (T, E, P) => [E, P] },
    { key: 'figure',          func: getFigureDescription,        args: (T, E, P, E_dom, T_dom) => [T, E, P, E_dom, T_dom] },
    { key: 'muscle',          func: getMuscleDescription,        args: (T, E, P, E_dom) => [T, E, P, E_dom] },
    { key: 'genitalsPenis',     func: getPenisDescription,         args: (T, E, P, E_dom) => [T, E, P, E_dom] },
    { key: 'genitalsTesticles', func: getTesticlesDescription,     args: (T, E, P, E_dom) => [T, E, P, E_dom] },
];

function trackAndLogChange(paramKey, currentValue, changeTexts) {
    const previousValue = state.previousBodyParams[paramKey];
    if (currentValue !== previousValue && previousValue !== undefined && previousValue !== "") {
        const changeDescriptionPart = currentValue.substring(currentValue.indexOf(':') + 1).trim();
        const parameterTitle = currentValue.substring(0, currentValue.indexOf(':')).trim();
        if (changeDescriptionPart) {
            const formattedChangeDesc = changeDescriptionPart.charAt(0).toLowerCase() + changeDescriptionPart.slice(1);
            changeTexts.push(`${parameterTitle}: ${formattedChangeDesc}`);
        }
    }
    state.previousBodyParams[paramKey] = currentValue;
    return currentValue;
}

export function updateBody() {
    // –í –±—É–¥—É—â–µ–º —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞,
    // –Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (!state.hormonesUnlocked) {
        // –ú—ã –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å 'discoveryPoints', –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –±–ª–æ–∫ —Å—Ç–∞–Ω–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω
        const preUnlockLines = [
            "–¢—ã –∂–∏–≤–µ—à—å –≤ –¥–æ–º–µ –º–∞—á–µ—Ö–∏. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, –∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ç–µ–±–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è...",
            `–í–ª–∏—è–Ω–∏–µ –º–∞—á–µ—Ö–∏: ${state.stepMotherInfluence}`
        ];
        el.bodyDesc.textContent = fullBodyDescriptionForModalStore = preUnlockLines.join('\n\n');
        return;
    }

    const T = state.emaT, E = state.emaE, P = state.progress;
    const T_is_dominant = T > E + 10;
    const E_is_dominant = E > T + 5;
    const hormonalBalanceFactor = Math.max(0, Math.min(100, (E - T + C.MAX_HORMONE_LEVEL) / 2));
    
    state.recentBodyChanges = [];
    
    const allBodyLines = bodyPartDescriptors.map(descriptor => {
        const args = descriptor.args(T, E, P, E_is_dominant, T_is_dominant);
        const currentValue = descriptor.func(...args);
        return trackAndLogChange(descriptor.key, currentValue, state.recentBodyChanges);
    });

    const feelingDesc = getFeelingDescription(E, P, E_is_dominant, hormonalBalanceFactor);
    allBodyLines.push(feelingDesc);
    allBodyLines.push(getCurrentOutfitDescription());

    fullBodyDescriptionForModalStore = allBodyLines.join('\n\n');

    const summaryLines = [feelingDesc, getCurrentOutfitDescription()];
    if (state.recentBodyChanges.length > 0) {
        // TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –∫–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        summaryLines.push("\n‚ùó –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:");
        const maxChangesToShowInSummary = 3;
        state.recentBodyChanges.slice(0, maxChangesToShowInSummary).forEach(change => {
            summaryLines.push(`  - ${change}`);
        });
        if (state.recentBodyChanges.length > maxChangesToShowInSummary) {
            summaryLines.push(`  ... –∏ –µ—â–µ ${state.recentBodyChanges.length - maxChangesToShowInSummary} –∏–∑–º.`);
        }
    } else if (state.day > 1) {
        summaryLines.push("\n–ó–∞–º–µ—Ç–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.");
    }
    
    el.bodyDesc.innerHTML = '';
    const summaryFragment = document.createDocumentFragment();
    summaryLines.forEach(line => {
        const p = document.createElement('p');
        p.textContent = line;
        p.style.whiteSpace = 'pre-wrap';
        if (line.includes('  - ')) p.style.marginLeft = "1em";
        if (line.startsWith("\n‚ùó") || line.startsWith("\n–ó–∞–º–µ—Ç–Ω—ã—Ö")) p.style.marginTop = "0.5em";
        summaryFragment.appendChild(p);
    });
    
    let modalButton = document.createElement('button');
    modalButton.id = 'open-body-details-button';
    modalButton.className = 'choice-button';
    modalButton.textContent = t('ui.body_details_button');
    modalButton.style.marginTop = '15px';
    modalButton.onclick = openBodyDetailsModal;
    summaryFragment.appendChild(modalButton);

    el.bodyDesc.appendChild(summaryFragment);
}

// --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–æ–∫ (–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –∏ –ì–∞—Ä–¥–µ—Ä–æ–±) ---

function renderCurrentTabContent() {
    if (state.gameState !== 'normal') {
        // –ï—Å–ª–∏ –∏–¥–µ—Ç —Å–æ–±—ã—Ç–∏–µ, –ù–ï –¢–†–û–ì–ê–ï–ú –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä el.choices.
        // –û–Ω —Å–µ–π—á–∞—Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π renderEvent.
        // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.
        return;
    }

    // –ï—Å–ª–∏ –∂–µ –∏–≥—Ä–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º, –ø–æ—Ç–æ–º —Ä–∏—Å—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.
    el.choices.innerHTML = ''; 

    if (state.tab === 'wardrobe') {
        renderWardrobeUI();
    } else {
        renderChoices();
    }
}

export function renderWardrobeUI() {
    const fragment = document.createDocumentFragment();

    const equippedSection = createWardrobeSection('–°–µ–π—á–∞—Å –Ω–∞–¥–µ—Ç–æ:', state.currentOutfit, 'unequip');
    const currentlyWornItemIds = Object.values(state.currentOutfit).filter(id => id !== null);
    const availableItems = state.ownedClothes.filter(itemId => !currentlyWornItemIds.includes(itemId));
    
    const availableItemsBySlot = {};
    availableItems.forEach(itemId => {
        const item = CLOTHING_ITEMS[itemId];
        if (!availableItemsBySlot[item.slot]) availableItemsBySlot[item.slot] = [];
        availableItemsBySlot[item.slot].push(itemId);
    });

    const ownedSection = createWardrobeSection('–í —à–∫–∞—Ñ—É:', availableItemsBySlot, 'equip');
    
    fragment.appendChild(equippedSection);
    fragment.appendChild(ownedSection);
    el.choices.innerHTML = '';
    el.choices.appendChild(fragment);
}

function createWardrobeSection(title, items, actionType) {
    const section = document.createElement('div');
    section.className = 'wardrobe-section';
    const h3 = document.createElement('h3');
    h3.textContent = title; // TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –ª–æ–∫–∞–ª—å
    section.appendChild(h3);

    let hasItems = false;
    for (const slotName in items) {
        const itemOrItems = items[slotName];
        if (!itemOrItems || (Array.isArray(itemOrItems) && itemOrItems.length === 0)) continue;

        const itemsArray = Array.isArray(itemOrItems) ? itemOrItems : [itemOrItems];
        itemsArray.forEach(itemId => {
            hasItems = true;
            const item = CLOTHING_ITEMS[itemId];
            const itemDiv = document.createElement('div');
            itemDiv.className = 'wardrobe-item-display';

            const itemNameSpan = document.createElement('span');
            const slotKeyName = Object.keys(CLOTHING_SLOTS).find(key => CLOTHING_SLOTS[key] === item.slot);
            itemNameSpan.textContent = `${item.name} (—Å–ª–æ—Ç: ${slotKeyName})`; // TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
            itemDiv.appendChild(itemNameSpan);

            const button = document.createElement('button');
            button.className = 'choice-button wardrobe-button';
            if (actionType === 'equip') {
                button.textContent = '–ù–∞–¥–µ—Ç—å'; // TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
                button.onclick = () => equipItem(itemId);
            } else {
                button.textContent = '–°–Ω—è—Ç—å'; // TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
                button.onclick = () => unequipItem(item.slot);
            }
            itemDiv.appendChild(button);
            section.appendChild(itemDiv);
        });
    }

    if (!hasItems) {
        const p = document.createElement('p');
        // TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
        p.textContent = actionType === 'equip' ? '–í —à–∫–∞—Ñ—É –ø—É—Å—Ç–æ –∏–ª–∏ –≤—Å—è –æ–¥–µ–∂–¥–∞ —É–∂–µ –Ω–∞–¥–µ—Ç–∞.' : '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–µ—Ç–æ.';
        section.appendChild(p);
    }
    return section;
}

export function renderChoices() {
    const fragment = document.createDocumentFragment();
    const actionsToDisplay = actions.filter(action =>
        action.tab === state.tab &&
        !(action.tab === 'hormone' && !state.hormonesUnlocked)
    );

    actionsToDisplay.forEach(action => {
        const buttonElement = choiceButtonCache[action.id]?.buttonElement || document.createElement('button');
        if (!choiceButtonCache[action.id]) {
            buttonElement.className = 'choice-button';
            buttonElement.addEventListener('click', action.handler.bind(action));
            choiceButtonCache[action.id] = { buttonElement };
        }

        // --- –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---

        // 1. –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É
        let icon = ACTION_ICON_MAP[action.id] || '';
        // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –∫–Ω–∏–≥–∏
        if (action.id === 'read_book') {
            icon = state.hormonesUnlocked ? 'üìñ ' : 'üìö ';
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É
        const key = typeof action.textKey === 'function' ? action.textKey() : action.textKey;
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ
        const replacements = {
            duration: C.T_BLOCKER_DURATION_DAYS,
            effect: C.T_PILL_EFFECT,
            e_effect: C.E_PILL_EFFECT_E,
            t_reduction: C.E_PILL_EFFECT_T_REDUCTION
        };
        let baseText = t(key, replacements);
        
        let fullButtonText = `${icon}${baseText}`;
        let isDisabled = (action.condition && !action.condition());

        // 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –¥–æ—Ö–æ–¥–µ
        if (action.cost > 0) {
            fullButtonText += ` (‚Äì${action.cost}${C.CURRENCY_SYMBOL})`;
            if (state.money < action.cost) {
                isDisabled = true;
                // TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –ª–æ–∫–∞–ª—å
                fullButtonText += ` (–ù—É–∂–Ω–æ: ${action.cost}${C.CURRENCY_SYMBOL})`;
            }
        } else if (action.id === 'work') {
            fullButtonText += ` (+${C.WORK_INCOME}${C.CURRENCY_SYMBOL})`;
        }

        // 4. –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞—Ç–æ—Ä–∞
        if (action.id === 't_blocker' && state.t_blocker_active_days > 0) {
             fullButtonText = `${icon}${t('actions.t_blocker.active', { days: state.t_blocker_active_days })}`;
             isDisabled = true;
        }

        buttonElement.textContent = fullButtonText;
        buttonElement.disabled = isDisabled;
        fragment.appendChild(buttonElement);
    });

    el.choices.innerHTML = '';
    el.choices.appendChild(fragment);
}


// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ ---

export function updateStats() {
    el.day.textContent = state.day;
    el.money.textContent = `${state.money}${C.CURRENCY_SYMBOL}`;
    el.test.textContent = `${state.testosterone.toFixed(0)} / ${C.MAX_HORMONE_LEVEL}`;
    el.est.textContent = `${state.estrogen.toFixed(0)} / ${C.MAX_HORMONE_LEVEL}`;

    el.tbar.style.width = `${(state.testosterone / C.MAX_HORMONE_LEVEL) * 100}%`;
    el.ebar.style.width = `${(state.estrogen / C.MAX_HORMONE_LEVEL) * 100}%`;

    updateProgressDisplay();
    updateTabsVisibility();
    updateBody();
    renderCurrentTabContent();
}

export function openBodyDetailsModal() {
    if (el.modalOverlay && el.modalBodyDetailsContent) {
        el.modalBodyDetailsContent.innerHTML = fullBodyDescriptionForModalStore.replace(/\n/g, '<br>');
        el.modalOverlay.classList.add('active');
    }
}

export function closeBodyDetailsModal() {
    if (el.modalOverlay) {
        el.modalOverlay.classList.remove('active');
    }
}

// --- –ù–û–í–´–ô –†–ê–ó–î–ï–õ: –î–í–ò–ñ–û–ö –°–û–ë–´–¢–ò–ô ---

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É —Å–æ–±—ã—Ç–∏—è, –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
 * @param {object} eventData - –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ gameEvents.
 * @param {string} [sceneId='intro'] - ID —Å—Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
export function renderEvent(eventData, sceneId = 'intro') {
    const scene = eventData.scenes.find(s => s.id === sceneId);
    if (!scene) {
        console.error(`–°—Ü–µ–Ω–∞ —Å ID ${sceneId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ ${eventData.id}`);
        endEvent();
        return;
    }

    const choicesContainer = el.choices;
    // –í–æ—Ç –∑–¥–µ—Å—å –æ—á–∏—Å—Ç–∫–∞, —á—Ç–æ–±—ã —Å—Ü–µ–Ω—ã –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª–∏—Å—å –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞.
    choicesContainer.innerHTML = ''; 

    const eventWrapper = document.createElement('div');
    eventWrapper.className = 'event-display';

    // –†–µ–Ω–¥–µ—Ä–∏–º –¥–∏–∞–ª–æ–≥
    const dialogueDiv = document.createElement('div');
    dialogueDiv.className = 'event-dialogue';
    scene.dialogue.forEach(line => {
        const p = document.createElement('p');
        const speakerName = (line.speaker === 'stepmom') ? C.STEPMOM_NAME : state.playerName;
        const text = t(line.text_key, { playerName: state.playerName });
        p.innerHTML = `<strong class="speaker-${line.speaker}">${speakerName}:</strong> <em>"${text}"</em>`;
        dialogueDiv.appendChild(p);
    });
    eventWrapper.appendChild(dialogueDiv);

    const choicesDiv = document.createElement('div');
    choicesDiv.className = 'event-choices';
    scene.choices.forEach(choice => {
        const button = document.createElement('button');
        button.className = 'choice-button event-choice';
        button.textContent = t(choice.text_key);
        button.onclick = () => {
            const result = choice.action(state);
            if (result.endEvent) {
                endEvent();
            } else if (result.nextSceneId) {
                renderEvent(eventData, result.nextSceneId);
            }
        };
        choicesDiv.appendChild(button);
    });
    eventWrapper.appendChild(choicesDiv);
    
    choicesContainer.appendChild(eventWrapper);
}

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
 */
function endEvent() {
    state.gameState = 'normal';
    console.log("–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
    updateStats(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
}